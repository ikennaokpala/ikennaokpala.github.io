<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ikenna Okpala]]></title>
  <link href="http://ikennaokpala.com/atom.xml" rel="self"/>
  <link href="http://ikennaokpala.com/"/>
  <updated>2016-01-03T17:37:21+00:00</updated>
  <id>http://ikennaokpala.com/</id>
  <author>
    <name><![CDATA[Ikenna Okpala]]></name>
    <email><![CDATA[me@ikennaokpala.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fix OPENVPN Network Interface Mismatch]]></title>
    <link href="http://ikennaokpala.com/blog/fix-openvpn-network-interface-mismatch"/>
    <updated>2014-04-05T05:35:09+01:00</updated>
    <id>http://ikennaokpala.com/blog/fix-openvpn-network-interface-mismatch</id>
    <content type="html"><![CDATA[<p>Getting VPN clients-to-server connected should be a piece of cake right. Simply dropping the client.conf (.ovpn) file and certificates (i.e crt and .key files) in the /etc/openvpn directory should do the trick.</p>

<p>Today, after a bit of housekeeping on my client box, connecting to the OPENVPN server seemed a big ask.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  <span class="nv">$:</span> service openvpn restart
</span><span class='line'>  Stopping virtual private network daemon:/etc/init.d/openvpn: 98: <span class="nb">kill</span>: No such process
</span><span class='line'>
</span><span class='line'>   client server.
</span><span class='line'>  Starting virtual private network daemon: client server.
</span><span class='line'>  Stopping virtual private network daemon:/etc/init.d/openvpn: 98: <span class="nb">kill</span>: No such process
</span><span class='line'>
</span><span class='line'>   client server.
</span><span class='line'> <span class="sb">```</span>
</span><span class='line'>&lt;!--more--&gt;
</span><span class='line'>After a bit of debugging the VPN client.conf:
</span></code></pre></td></tr></table></div></figure>


<p>bash</p>

<pre><code>openvpn --config client.conf
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>The result were as follows:
</span></code></pre></td></tr></table></div></figure>


<p>bash
  OPTIONS IMPORT: timers and/or timeouts modified
  OPTIONS IMPORT: &#8211;ifconfig/up options modified
  OPTIONS IMPORT: route-related options modified
  Note: Cannot ioctl TUNSETIFF tap0: Device or resource busy (errno=16)
  do_ifconfig, tt->ipv6=0, tt->did_ifconfig_ipv6_setup=0
  /sbin/ifconfig  198.xxx.xxx.xxx netmask 255.255.254.0 mtu 1500 broadcast 198.xxx.xxx.xxx
  SIOCSIFADDR: No such device
  : ERROR while getting interface flags: No such device
  SIOCSIFNETMASK: No such device
  SIOCSIFMTU: No such device
  S  IOCSIFBRDADDR: No such device
  : ERROR while getting interface flags: No such device
  Linux ifconfig failed: external program exited with error status: 255
  Exiting</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>As you may have observed above the network interface appeared to be busy or take over by some other service or simply not available.
</span></code></pre></td></tr></table></div></figure>


<p>bash</p>

<pre><code>$: brctl show
bridge name bridge id       STP enabled interfaces
</code></pre>

<p>vmbrx       xxxxxxxx            no      ethx
vmbry       xxxxxxxx            no      ehtx</p>

<pre><code>                                    tap0
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>A query on the available network interfaces on the client showed that tap0 was actually available but already taken up.
</span><span class='line'>
</span><span class='line'>A way of getting the vpn client to reconnect without interupting the activity on tap0 is to create up.sh and down.sh just <span class="k">for </span>the VPN client, having them to use another tap interface.
</span></code></pre></td></tr></table></div></figure>


<p>bash</p>

<pre><code>#!/bin/sh
/sbin/ifconfig vmbrx promisc
/sbin/ifconfig tapxx up promisc
/sbin/brctl addif vmbrxx tapxx
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="sb">```</span>bash
</span><span class='line'>  <span class="c">#!/bin/sh</span>
</span><span class='line'>  /sbin/brctl delif vmbrxx tapxx
</span><span class='line'>  /sbin/ifconfig tapxx down -promisc
</span><span class='line'>  /sbin/ifconfig vmbrxx -promisc
</span></code></pre></td></tr></table></div></figure>


<p>Now on testing the VPN client connection again all should be well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Look At Teradata AMPs]]></title>
    <link href="http://ikennaokpala.com/blog/a-look-at-Teradata-AMPs-"/>
    <updated>2013-10-09T03:22:18+01:00</updated>
    <id>http://ikennaokpala.com/blog/a-look-at-Teradata-AMPs-</id>
    <content type="html"><![CDATA[<p>If you are from a music background and may be reading/hearing this for the first time, then &#8216;NO&#8217;, this article is not about measuring the change over individual spatial periods (sound amplification).</p>

<p>This article &#8216;YES&#8217; seeks to share my own notes on Teradata&#8217;s Access Module Processor or AMP for short.</p>

<p>AMP is a Virtual processor that exist within the confines of the parallel-processing environment of the Teradata Database.</p>

<!--more-->


<p>AMP manages communication through Boardless BYNET interface, performs database (Output data conversion, Manage Disk space, Accounting, Journaling, Locking, Joining, Sorting, Agreegation) disk subsytem manipulation and database file subsytem task management.</p>

<p>An individual AMP instance within teradata takes charge of access and manipulation of data. In this respect, an AMP is allocated a portion of the database as an area of operation, this includes physical disk for storing its tables. Teradata&#8217;s AMP acquires some space in the disk through its association with a virtual disk (vdisk).</p>

<p>This then allows it to read and write to disk, these then make-up the AMP steps to physical blocks of data that were queried. It takes handles the accessing, processing and manipulation of the data. More than one AMP may exist in one node, communicating with themselves through BYNET.</p>

<p>AMPs offers basic SQL query parallelism to data blocks/jobs in Teradata. The parallel processing through occurs after, Teradata has pre-defined the number of AMP nodes be used. This is highly influenced by indexes and how many data blocks that can be derived from the query.</p>

<p>Teradata divides these to the defined AMPs using hash functions to enable subquery-level parallel processing.</p>

<p>Base on this teradata&#8217;s query transaction executes in a parallel manner across the defined AMPs, with associated chunks of data processed independently though in a simultaneous manner.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using .ruby-version with pow]]></title>
    <link href="http://ikennaokpala.com/blog/pow-ruby-version"/>
    <updated>2013-06-09T02:23:58+01:00</updated>
    <id>http://ikennaokpala.com/blog/pow-ruby-version</id>
    <content type="html"><![CDATA[<p><strong>If you probably upgraded to the latest RVM and you got the message like i did to use ruby-version and ruby-gemset and you bought the idea.. The below helps set parity with the former.</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  <span class="k">if</span> <span class="o">[</span> -f <span class="s2">&quot;$rvm_path/scripts/rvm&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> -f <span class="s2">&quot;.ruby-version&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> -f <span class="s2">&quot;.ruby-gemset&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">source</span> <span class="s2">&quot;$rvm_path/scripts/rvm&quot;</span>
</span><span class='line'>    rvm use <span class="sb">`</span>cat .ruby-version<span class="sb">`</span>@<span class="sb">`</span>cat .ruby-gemset<span class="sb">`</span>
</span><span class='line'>  <span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Teradata ODBC for Ruby development]]></title>
    <link href="http://ikennaokpala.com/blog/install-teradata-odbc-for-ruby-development"/>
    <updated>2013-05-15T02:23:58+01:00</updated>
    <id>http://ikennaokpala.com/blog/install-teradata-odbc-for-ruby-development</id>
    <content type="html"><![CDATA[<p><strong>To install Teradata for ruby development, first it is advisable to install it on a 32 bit linux based VM.</strong></p>

<p>  <strong><em> Given the above, the following steps should work ok:</em></strong></p>

<ul>
<li><p>Download the teradata CLIv2 and ODBC Driver from <a href="http://downloads.teradata.com/download">http://downloads.teradata.com/download</a></p></li>
<li><p> Download Teradata&#8217;s Ruby native access interface from <a href="http://downloads.teradata.com/download">http://sourceforge.net/projects/rubycli/</a></p></li>
</ul>


<!--more-->


<ul>
<li><p>Install RPM:
<code>bash
  sudo apt-get install rpm
</code></p></li>
<li><p> Open up the cliv2:</p>

<p><code>bash
  tar -xvf  cliv2_LINUX_indep.14.00.00.07.tar.gz
</code></p></li>
<li><p> Change directory  and Install cliv2:</p>

<p><code>bash
  sudo rpm -ivh --nodeps cliv2-14.00.00.07-1.noarch.rpm
</code></p></li>
<li><p> Change directory to tdicu:</p>

<p><code>bash
   sudo rpm -ivh --nodeps tdicu-14.00.00.00-1.noarch.rpm
</code></p></li>
<li><p> Change directory to TeraGSS and install:
<code>bash
  sudo rpm -ivh --nodeps TeraGSS_linux_x64-14.00.02.07-1.noarch.rpm
</code></p></li>
<li><p> Open up tdodbc:</p>

<p><code>bash
  tar -xvf tdodbc__linux_indep.14.00.00.04-1.tar.gz
</code></p></li>
<li><p> Change dorectory to tdodbc:</p>

<p><code>bash
  sudo rpm -ivh --nodeps tdodbc-14.00.00.04-1.noarch.rpm
</code></p></li>
</ul>


<p>NB: tdodbc may also contain tdicu and TeraGSS you may want to ignore these as you may have already installed them.</p>

<ul>
<li><p>Change directory to rubycli-1.0.0 and run the following commands:
<code>bash
  make unix &amp;&amp; ruby setup.rb install
</code></p></li>
<li><p>Add these paths to your .zshrc or .bashrc or .bash_profile files</p>

<p>&#8220;`bash</p>

<h1>export LD_LIBRARY_PATH=/opt/teradata/client/14.00/lib</h1>

<p>export COPLIB=/opt/teradata/client/14.00/lib
export COPERR=/opt/teradata/client/14.00/lib
export LD_LIBRARY_PATH=/opt/teradata/client/14.00/tbuild/lib:/opt/teradata/client/14.00/lib
&#8220;`</p></li>
<li><p> Finally download or obtain the the 32bit version of the following files:
bteq, fastload, fexp, mload, ppcmain</p>

<p>&#8220;`bash
sudo mkdir -p  /opt/teradata/client/14.00/bin</p>

<h1>copy files from where you have downloaded them to</h1>

<p>sudo cp -R bin/<em> /opt/teradata/client/14.00/bin
sudo chown -R root:root /opt/teradata/client/14.00/bin/</em>
sudo chmod +x /opt/teradata/client/14.00/bin/*
&#8220;`</p></li>
</ul>


<p>NB: Check that all the dependencies for each of the bin stubs are present.
example:</p>

<pre><code>```bash
  ldd fexp
```
</code></pre>

<p>You may observe that the libpm.so file 32 bit version is not present, so you then copy the file like this:</p>

<p>  <code>bash
  cp /path to /client/14.00/lib/libpm.so /opt/teradata/client/14.00/lib
 </code></p>

<p>After this you should be rarring and ready to go.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prioritizing My Backlog With Economics]]></title>
    <link href="http://ikennaokpala.com/blog/prioritizing-my-backlog-with-economics"/>
    <updated>2013-05-07T16:44:38+01:00</updated>
    <id>http://ikennaokpala.com/blog/prioritizing-my-backlog-with-economics</id>
    <content type="html"><![CDATA[<p>I bumped into this <a href="http://feedproxy.google.com/~r/agilecommons/commonsblog/~3/iFH4_vtYCMA/using-economics-prioritize-your-backlog">article</a> by Alex Pukinskis and it got me thinking.</p>

<p>This could be another great way to help translate/eradicate subjective connotations to actual value propositions.</p>

<p>But then I don&#8217;t know what kind of business emotions this may stir up.</p>

<!--more-->


<p>Also, would this be another opportunity to emphasize on the already obvious (these days everyone is aware of certain economic trends/indicators) or will it be based on what could be a potential viral revenue stream (the next BIG thing).</p>

<p>And how well could the team understand and/or benefit from this together????</p>

<p>Alex&#8217;s article, advocates the use of adequeate job sizing practice with actual cost implications, value scoring and a couple of other latent metrics brought in, to serve as visibility into feasibility.</p>

<p>According to Don Reinertsen decision could be initially reached through calculating economic models, which he termed a Weighted Shortest-Job-First (WSJF) approach.</p>

<p><strong><em>Ceteris paribus</em></strong>, it is expected that the smallest of features will deliver value quickly and should take precendence at the start of the development efforts.</p>

<p>All good and fine..</p>

<p>On the flip side, the likes of Ron Sen would argue that in this present day information rules and I qoute:</p>

<blockquote><p>&#8220;Realistically, forces affecting price (and psychology) constantly evolve, under a variety of influences. What has changed during the information age, however, is the transmission velocity. Therefore, volatility can theoretically increase (or decrease) in response to information. Much of what passes for news or commentary has the design to alter opinion or &#8216;spin&#8217; facts.&#8221;</p></blockquote>

<p>This area of estimating software project is quite susceptible to a lot of news hazard and could take a sharp turn, if not crash land somewhere.</p>

<p>Notwithstanding, it is gaining popularity and it appears some projects have found value in this approach. Before I forget it sounds great on paper.</p>

<p>REFERENCE:</p>

<ul>
<li>Reinertsen D.G 2009. The Principles of Product Development Flow: Second Generation Lean Product Development, Celeritas Publishing.</li>
<li>Ron Sen, MD, FCCP, 2010. The Fallacy of Ceteris Paribus. Available at: <a href="http://ronsen.blogspot.co.uk/2010/01/fallacy-of-ceteris-paribus.html">http://ronsen.blogspot.co.uk/2010/01/fallacy-of-ceteris-paribus.html</a> [Accessed on 12th of January 2013].</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fix ubuntu virtual box (windows) full screen problem]]></title>
    <link href="http://ikennaokpala.com/blog/fix-ubuntu-virtual-box-windows-full-screen-problem"/>
    <updated>2013-04-03T16:44:38+01:00</updated>
    <id>http://ikennaokpala.com/blog/fix-ubuntu-virtual-box-windows-full-screen-problem</id>
    <content type="html"><![CDATA[<p>NOTE the 4.2.0 version of virtual box does not support the 3d graphic libraries for 12.11</p>

<p>You need to download the latest guest additions iso from here http://download.virtualbox.org/virtualbox/</p>

<!--more-->


<p>Secondly mount it on by clicking Devices -> CD/DVD Devices and then run the installation process.</p>

<p>After this restart and your VM should be able to render in full screen mode properly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Capistrano – Could not parse object "b4042..."]]></title>
    <link href="http://ikennaokpala.com/blog/capistrano-could-not-parse-object-b40429d9b1f72ac16a22601b4c6843ff24a74e6f"/>
    <updated>2012-08-31T03:36:31+01:00</updated>
    <id>http://ikennaokpala.com/blog/capistrano-could-not-parse-object-b40429d9b1f72ac16a22601b4c6843ff24a74e6f</id>
    <content type="html"><![CDATA[<p>The above titled error gave a friend some troubles.</p>

<p>The thing is that we found out that Capistrano was failing because apparently it had lost track of the commit SHA, hence the error message:</p>

<!--more-->


<p>&#8220;Could not parse object ’b4042&#8230;′&#8221;</p>

<p>We found deleting the “cached-copy” inside the shared directory, to have made this go away at least for now.</p>

<p> </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debot gem 0.0.1 released: (Capistrano recipes for Ruby, Rails, Ngnix, Unicorn and Postgres setup)]]></title>
    <link href="http://ikennaokpala.com/blog/debot-gem-0-0-1-released-custom-recipes-for-ruby-rails-app-ngnix-unicorn-and-postgres-setup"/>
    <updated>2012-07-24T16:47:28+01:00</updated>
    <id>http://ikennaokpala.com/blog/debot-gem-0-0-1-released-custom-recipes-for-ruby-rails-app-ngnix-unicorn-and-postgres-setup</id>
    <content type="html"><![CDATA[<p>I just launched <a href="https://github.com/kengimel/debot">debot</a> a gem with custom recipes that extend capistrano for provisioning and deploying rails application to a VPS with ruby (via rubyenv), nginx, postgresql and unicorn..</p>

<!--more-->


<p>For more details <a href="https://github.com/kengimel/debot/blob/master/README.md">Click here </a></p>

<p>NB: I am just pouring out ideas on this gem, as i use it on multiple projects. it is under constant development. You are welcome to contribute, try it out and give feeback</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remote access to PostgreSQL server and Removing Postgres]]></title>
    <link href="http://ikennaokpala.com/blog/remote-access-to-postgresql-server-14"/>
    <updated>2012-06-08T15:43:50+01:00</updated>
    <id>http://ikennaokpala.com/blog/remote-access-to-postgresql-server-14</id>
    <content type="html"><![CDATA[<p>This is a very common requirement for remote staging environments.</p>

<p>All that is required is edit postgressql.conf and pg_hba.conf files.</p>

<p>To get going on this it maybe worthy of note to first search for these files.</p>

<!--more-->


<div>
  <pre><code class='bash'>find / -name &quot;postgresql.conf&quot;</code></pre>
</div>


<p>Because locations for these files may differ per operating system (i.e Linux distros)</p>

<p>For this post the location should match Ubuntu/Debian.</p>

<p>For Ubuntu these files are located in &#8220;/etc/postgresql/9.1/main&#8221; so cd there.</p>

<p>First edit the postgresql.conf, by adding this to the file &#8220;listen_addresses = &#8216;*&#8217;&#8221;</p>

<div>
  <pre><code class='bash'>listen_addresses = &#39;*&#39;</code></pre>
</div>


<p>Next stop edit the pg_hba.conf, add the below close to the end of the file.</p>

<div>
  <pre><code class='bash'>host    all             all             0.0.0.0/0               md5</code></pre>
</div>


<p>Finally restart postgresql:</p>

<div>
  <pre><code class='bash'>service postgresql restart</code></pre>
</div>


<p>OR</p>

<div>
  <pre><code class='bash'>/etc/init.d/postgresql restart</code></pre>
</div>


<p>To remove the EnterpriseDB One-Click install of PostgreSQL 9.1:</p>

<p>Open a terminal window</p>

<p>Utilities->Terminal</p>

<p>Run the uninstaller</p>

<p>sudo /Library/PostgreSQL/9.1/uninstall-postgresql.app/Contents/MacOS/installbuilder.sh</p>

<p>If you installed with the Postgres Installer, you can do:</p>

<p>open /Library/PostgreSQL/9.2/uninstall-postgresql.app</p>

<p>It will ask for the administrator password and run the uninstaller.</p>

<p>Remove the PostgreSQL and data folders (Wizard will notify you that these were not removed)</p>

<p>sudo rm -rf /Library/PostgreSQL</p>

<p>Remove the ini file</p>

<p>sudo rm /etc/postgres-reg.ini</p>

<p>Remove the PostgreSQL user</p>

<p>System Preferences -> Users &amp; Groups</p>

<p>Unlock the settings panel by clicking on the padlock and enter your password</p>

<p>Select the PostgreSQL user and click on the minus button.</p>

<p>Restore your shared memory settings</p>

<p>sudo rm /etc/sysctl.conf</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using homebrew with multiple users on a single machine]]></title>
    <link href="http://ikennaokpala.com/blog/using-homebrew-with-multiple-users-on-a-single-machine"/>
    <updated>2012-04-11T20:17:43+01:00</updated>
    <id>http://ikennaokpala.com/blog/using-homebrew-with-multiple-users-on-a-single-machine</id>
    <content type="html"><![CDATA[<p>I a big fan of <a href="http://mxcl.github.com/homebrew/">homebrew</a>. I have been using it for a while now and i am like a lot. But i recent hit a big headache with permission issue with another account on my Mac.</p>

<p>I installed homebrew using a previous user account, but this proved to be very unforgiving to install software from the new user account.</p>

<!--more-->


<div>
  <pre><code class='bash'>brew install redis
Error: Cannot write to /usr/local/Cellar</code></pre>
</div>


<p>The following steps will enable the new user and/or other users to install software with homebrew. BTW thanks for Geoff Low (glow) for helping out.</p>

<p>Firstly set the umask for the user. (inside the .bashrc or .profile or .bash_profile)</p>

<div>
  <pre><code class='bash'>umask 0002 # grant write permission to group</code></pre>
</div>


<p>For more on <a href="http://www.cyberciti.biz/tips/understanding-linux-unix-umask-value-usage.html">umask.</a></p>

<p>then recursively grant group write permission to /usr/local directory:</p>

<div>
  <pre><code class='bash'>sudo chmod -R g+w /usr/local/</code></pre>
</div>


<p>then also change recursively /usr/local group to staff:</p>

<div>
  <pre><code class='bash'>sudo chgrp -R staff /usr/local</code></pre>
</div>


<p>Do same for /Library/Caches/Homebrew (optional):</p>

<div>
  <pre><code class='bash'>sudo chmod -R g+w /Library/Caches/Homebrew
sudo chgrp -R staff /Library/Caches/Homebrew</code></pre>
</div>


<p>Alright thats it you should be good to go now with the new user account installing software with homebrew.</p>

<p>Be sure to run and follow any further instructions:</p>

<div>
  <pre><code class='bash'>brew doctor</code></pre>
</div>


<p>NB: It is worthy to note that homebrew by design requires that in your user profile file (i.e. .bashrc or .profile or .bash_profile), that your set /usr/local/bin ahead of /usr/bin to avoid clashes with system software tools that may exist in other paths on your machine. it is important that you override the system paths to use homebrew installations as default.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modify Capistrano shell]]></title>
    <link href="http://ikennaokpala.com/blog/modify-capistrano-shell"/>
    <updated>2012-03-17T23:53:15+00:00</updated>
    <id>http://ikennaokpala.com/blog/modify-capistrano-shell</id>
    <content type="html"><![CDATA[<p>I remember a while back i <a href="https://twitter.com/#!/kengimel/statuses/152549051076837377">tweeted</a> and <a href="https://twitter.com/#!/kengimel/status/152210894733062144">tweeted</a> :( for some help with understanding why cap shell was different from the user&#8217;s ssh shell.</p>

<p>Glad that now i finally came in contact with some way to modify the cap shell to use the same environment variables as SSH or login shell.</p>

<!--more-->


<p>Simply by adding in the deploy.rb file and you are done:</p>

<div>
  <pre><code class='bash'>set :default_shell, &quot;bash -l&quot;</code></pre>
</div>


<p>The <code>-l</code>flag will simply help to load the login shell properly rather than omit it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A good user story vs  a bad one]]></title>
    <link href="http://ikennaokpala.com/blog/a-good-user-story"/>
    <updated>2012-02-03T12:13:36+00:00</updated>
    <id>http://ikennaokpala.com/blog/a-good-user-story</id>
    <content type="html"><![CDATA[<p>Been practicing BDD using the usual suspects like RSpec and Cucumber for user stories in conjunction with stakeholders, to reveal and document behavior, as well as drive development in a large legacy code base.</p>

<p>I was asked this question yesterday at a meetup.</p>

<!--more-->


<blockquote><p>What is the difference between a good User story and a bad one?</p></blockquote>

<p>From my end based on experience and reading literature i summarise thus:</p>

<ul>
<li><p>A good user story should be short and sweet;  A bad one is nothing short of being bulky and clunky.</p></li>
<li><p>A good user story should focus on the &#8220;WHAT&#8221; and not the &#8220;HOW&#8221;;  A bad one may try to capture the &#8220;WHAT&#8221; and &#8220;HOW&#8221;.</p></li>
<li><p>A good user story should reflect the vision of the product owner; A bad one would not.</p></li>
<li><p>A good user story should be broken down properly (questionable and able to drive conversations); A bad one would be obscure and unable to drive curiosity.</p></li>
<li><p>A good user story should paint the picture properly for the Software Engineers (who may not have domain knowledge at first) but are expected to deliver value;  A bad one will paint a totally different picture.</p></li>
</ul>


<p>For more information on this: <a href="http://www.allaboutagile.com/writing-good-user-stories/">http://www.allaboutagile.com/writing-good-user-stories/</a></p>

<p>[youtube=http://www.youtube.com/watch?v=DaqyLWOEObY]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional Thinking]]></title>
    <link href="http://ikennaokpala.com/blog/functional-thinking"/>
    <updated>2012-01-30T21:34:56+00:00</updated>
    <id>http://ikennaokpala.com/blog/functional-thinking</id>
    <content type="html"><![CDATA[<p>In this talk<a href="http://www.nealford.com/"> Neal Ford</a> emphasizes the fact that functional programming uses a different way of solving a problem, thinking about the results rather than the steps to make.</p>

<!--more-->


<p>Link: <a href="http://www.infoq.com/presentations/Functional-Thinking">http://www.infoq.com/presentations/Functional-Thinking</a></p>

<p>Also Read this as well: <a href="http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html">http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deployment Strategy for Rails, Passenger and Nginx server with Multiple Virtual Hosts]]></title>
    <link href="http://ikennaokpala.com/blog/deployment-strategy-for-rails-passenger-and-nginx-server-with-multiple-virtual-hosts"/>
    <updated>2011-12-27T05:01:04+00:00</updated>
    <id>http://ikennaokpala.com/blog/deployment-strategy-for-rails-passenger-and-nginx-server-with-multiple-virtual-hosts</id>
    <content type="html"><![CDATA[<p>In this blog post i intend to share notes taken during deployment exercise of rails apps on Multiple Virtual Hosts.</p>

<p>I have decided to put this all down for self reference and possibly interesting debates that may help expose areas that i am not be aware of.</p>

<!--more-->


<p>Deploying rails apps from a beginners perspective (like mine) could be really confusing.</p>

<p>This note will show how i have come to avoid breaking the passenger-nginx compilation and deploying rails apps to Multiple Virtual Hosts.</p>

<p>The development stack/environment is based on the following technologies:</p>

<ul>
<li><p>Centos</p>

<ul>
<li><p>Run these commands to find out what version of Centos your server is.</p></li>
<li><p><code>cat /etc/redhat-release</code> gives me: &#8220;CentOS Linux release 6.0 (Final)&#8221;</p></li>
<li><p><code>uname -a</code> gives me: &#8220;Linux servername-xxx 2.6.32-71.29.1.el6.x86_64 #1 SMP Mon Jun 27 19:49:27 BST 2011 x86_64 x86_64 x86_64 GNU/Linux&#8221;</p></li>
</ul>
</li>
<li><p>Nginx Web Server</p></li>
<li><p>RVM 1.10.0</p></li>
<li><p>Phusion Passenger 3.0.11</p></li>
<li><p>Ruby 1.9.2 patch level 290</p></li>
<li><p>Rails 3.1.3</p></li>
</ul>


<p>It is worthy of note that at the time of writting this post the urls and rpm are valid. if you encounter any not found kinda error, you can google to find the rpm and the include it to the centos repo file.</p>

<div>
  <pre><code class='bash'>sudo vim /etc/yum.repos.d/CentOS-Base.repo</code></pre>
</div>


<p><strong>Firstly, before we get started we need to setup the following</strong></p>

<p><em>Setup a deployment user account</em>
Our rails application will run as user: deployerbot.
To create a deployerbot, allocate it to a group, modify the deployerbot user password and then add deployerbot to sudoers file.</p>

<div>
  <pre><code class='bash'>groupadd staff # if staff does not exist (cat /etc/groups | grep staff)
useradd -m -g staff -s /bin/bash deployerbot # if you need to add deploybot user to more groups  usermod -G grp1,grp2,newgrp username
passwd deployerbot
visudo  # edit to include deployerbot to the sudoers file.. notice that i changed this to visudo instead of vim /etc/sudoers.. this is a safer way to edit sudoers. see this link for more on visudo http://linux.about.com/library/cmd/blcmdl8_visudo.htm.. thanks to Geoff Low (gflow) for the correction..

# include this line below  &#39;root ALL=(ALL) ALL&#39;: to enable deployerbot to use the sudo command
deployerbot ALL=(ALL) ALL
#or alternatively add the staff group below  &#39;root ALL=(ALL) ALL&#39;: to enable deployerbot to use the sudo command as a member of the group
%staff ALL=(ALL) ALL
#login as the newly created user and create the ssh key
ssh-keygen -t rsa -b 4096</code></pre>
</div>


<p>More on <a href="http://ubuntuforums.org/showthread.php?t=904796">ssh and its key generation here</a>
Now the web applications are going to run in production-mode, include this line to /etc/environment to avoid repeating it for every kind of Rails like commands:</p>

<div>
  <pre><code class='bash'>RAILS_ENV=production</code></pre>
</div>


<p>_Install RVM _
Make sure you have all the essential armoury (dependencies) :)</p>

<div>
  <pre><code class='bash'>yum groupinstall &quot;Development Tools&quot;  # ubuntu equivalent may be this apt-get install build-essential ruby-full libmagickcore-dev imagemagick libxml2-dev libxslt1-dev git-core ruby-devel libxml2 libxml2-devel libxslt libxslt-devel

yum install kernel-devel kernel-headers # this may already have been installed by default

yum install openssl-devel libcurl-devel ImageMagick httpd-devel ruby-libs zlib-devel libjpeg-devel giflib-devel readline-devel

# or this could also work as well if the above fails

sudo rpm -Uvh http://download.fedora.redhat.com/pub/epel/5/i386/epel-release-5-4.noarch.rpm

yum -y install libpcap libpcap-devel libnet libnet-devel pcre pcre-devel gcc automake autoconf libtool make gcc-c++ libyaml libyaml-devel zlib zlib-devel pkgconfig ruby-devel libxml2 libxml2-devel libxslt libxslt-devel</code></pre>
</div>


<p>Check out this <a href="http://www.openinfosecfoundation.org/doc/INSTALL.txt">link</a> for more information</p>

<p>To Install RVM on Centos this following command is require (do this as the deployment user). Also make sure you already have curl and git installed.</p>

<div>
  <pre><code class='bash'>bash &lt; &lt;(curl -s https://rvm.beginrescueend.com/install/rvm) # after installation, rvm should be ready to use.. if not reboot

rvm notes # to find out if there are any system specific setting that require attention.. for centos you may need to create a .screenrc file with only this as its content shell -/bin/bash

usermod -a -G staff,rvm deployerbot  #modify deployerbot to multiple groups rvm and staff</code></pre>
</div>


<p>For Centos depending on the version you are running on i would advise run the command below for more information</p>

<div>
  <pre><code class='bash'>rvm notes</code></pre>
</div>


<p><em>Install Ruby and Upgrade RubyGems</em>
For precautionary reason install 1.9.2 with the following packages: (do this as the deployment user)</p>

<div>
  <pre><code class='bash'>rvm pkg install readline # you may want to do (--skip-autoreconf) this for each package to avoid autoreconf error: rvm --skip-autoreconf pkg install readline
rvm pkg install zlib
rvm pkg install openssl
rvm install 1.9.2 --with-openssl-dir=$rvm_path/usr --with-readline-dir=$rvm_path/usr # with zlib optional rvm install 1.9.2 --with-zlib-dir=$rvm_path/usr --with-openssl-dir=$rvm_path/usr --with-readline-dir=$rvm_path/usr
rvm use 1.9.2 # to make this the system&#39;s ruby do: rvm --default use 1.9.2

# Upgrade RubyGems to the latest (stable) and greatest.. :)
wget http://rubyforge.org/frs/download.php/xxxxx/rubygems-x.x.x*.tgz
tar zxvf rubygems-x.x.x*.tgz
cd rubygems-x.x.x*
ruby setup.rb
# to confirm rubygem upgrade:
gem -v</code></pre>
</div>


<p><em>Create a Gemsets for each web application</em>
This blog focuses on deployment on multiple virtual hosts we will be creating two gemsets demonstration purposes.</p>

<div>
  <pre><code class='bash'>rvm gemset create webapp1
rvm gemset create webapp2</code></pre>
</div>


<p>On the server create a ~/.gemrc file</p>

<div>
  <pre><code class='bash'>:verbose: true
:bulk_threshold: 1000
install: --no-ri --no-rdoc --env-shebang
:sources:
- http://gemcutter.org
- http://gems.rubyforge.org/
- http://gems.github.com
:benchmark: false
:backtrace: false
update: --no-ri --no-rdoc --env-shebang
:update_sources: true</code></pre>
</div>


<p><strong>
To deploy these apps on Nginx</strong>
<em>Install and setup passenger and nginx</em>
Passenger as i have come to know is simply mod_rails pr mod ruby for webservers like nginx.
now here is where i have observed that i made a big mistake. Now because you have multiple virtual host sitting on the server, they are mostly likely not useing the exactly set of gems and even possibly may different rubies.</p>

<p>With RVM installed on the server, your RVM directory is located here &#8220;$HOME/.rvm/&#8221; probably has taken this form.</p>

<div>
  <pre><code class='bash'>cd $HOME/.rvm/gems/
ls

# archives  environments  help     log        README   tmp      wrappers
# bin       examples      hooks    man        rubies   user
# config    gems          lib      patches    scripts  usr
# contrib   gemsets       LICENCE  patchsets  src      VERSION</code></pre>
</div>


<p>Out of all these we are interested in two folders the gems and wrapper.</p>

<p>A brief look into the gems folder you will find the following</p>

<div>
  <pre><code class='bash'>cd gems
ls

# cache            ruby-1.9.2-p290@webapp1      ruby-1.9.2-p290@webapp2
# ruby-1.9.2-p290  ruby-1.9.2-p290@global</code></pre>
</div>


<p>Because we want to maintain virtual host and accommodate dissimilarities between webapp1 and webapp2</p>

<p>I suggest installing passenger in the ruby-1.9.2-p290 gemset folder. This will avoid breaking passenger on each deployment of any of the two web applications, because for each time you reload or reinstall your gems , there is a big propensity of getting the passenger-nginx link broken. Hence the need to recompile passenger for nignx on the server.</p>

<p>This could also lead to errors like:</p>

<ul>
<li><p>500 internal server error</p></li>
<li><p>403 Forbidden</p></li>
<li><p>[Tue Dec 27 22:43:57 2011] [error] *** Passenger could not be initialised because of this error: Unable to start the Phusion Passenger watchdog because it encountered the following error during startup: Unable to start the Phusion Passenger logging agent because its executable (/path/to/gems/passenger-3.0.11/agents/PassengerLoggingAgent) doesn&#8217;t exist. This probably means that your Phusion Passenger installation is broken or incomplete. Please reinstall Phusion Passenger</p></li>
</ul>


<p>So i think it&#8217;s better to have the passenger gem separate from the gemsets for the web application. This will not require recompiling passenger on every deployment, hence leaving a high chance of downtime problems.</p>

<p>Now i have come across solutions like unicorn, but for now what is obtain in my environment is passenger. Burt will be checking unicorn out pretty soon.</p>

<p>To achieve this do the following (perform this as the deployment user):</p>

<div>
  <pre><code class='bash'>rvm use 1.9.2 # load the ruby-1.9.2-p290 folder into your current session

gem install passenger # this should install passenger to the ruby-1.9.2-p290 folder

passenger-install-nginx-module # do this to setup/compile passenger with nginx</code></pre>
</div>


<p>At a certain stage of the <em>passenger-install-nginx-module</em> you will be asked to chose to between two setup processes. For me i will take the number 1 option of installing nginx from scratch which is the recommended option. This also makes sense since so far we have not installed nginx.</p>

<p><em>Nginx Virtual Host Configuration</em>
For nginx assuming that decided to install it in /etc/nginx/ passenger will locate the nginx.conf in the conf folder. To correctly link passenger and nginx the copy the following to your nginx.conf file</p>

<div>
  <pre><code class='bash'>user  deployerbot staff;

worker_processes  2;

events {
    worker_connections  1024;
}
http {
    passenger_root /usr/local/rvm/gems/ruby-1.9.2-p290/gems/passenger-3.0.11;
    passenger_ruby /usr/local/rvm/wrappers/ruby-1.9.2-p290/ruby;

    include       mime.types;
    default_type  application/octet-stream;

    access_log  /etc/nginx/logs/access.log;
    error_log  /etc/nginx/logs/error.log;

    sendfile        on;
    keepalive_timeout  65;
    include /etc/nginx/conf.d/*.conf;
}</code></pre>
</div>


<p>Before the next steps create the conf.d directory. I personal prefer to keep them inside conf.d. You can chosen to keep yours somewhere else only remember to link it up.</p>

<div>
  <pre><code class='bash'>mkdir conf.d</code></pre>
</div>


<p>Now for webapp1 you want to configure you server something like this</p>

<div>
  <pre><code class='bash'>server {
    # if you&#39;re running multiple servers, instead of &quot;default&quot; you should
    # put your main domain name here
    listen 80;

    # you could put a list of other domain names this application answers
    server_name webapp1.com;

    root /var/www/path/to/webapp1/current/public;
    access_log /var/www/path/to/webapp1/logs/webapp1.access.log;
    error_log /var/path/to/webapp1/logs/webapp1.error.log;

    rewrite_log on;

    passenger_enabled on;
}</code></pre>
</div>


<p>And for webapp2 we have</p>

<div>
  <pre><code class='bash'>server {
    # if you&#39;re running multiple servers, instead of &quot;default&quot; you should
    # put your main domain name here
    listen 80;

    # you could put a list of other domain names this application answers
    server_name webapp2.com;

    root /var/www/path/to/webapp2/current/public;
    access_log /var/www/path/to/webapp2/logs/webapp2.access.log;
    error_log /var/path/to/webapp2/logs/webapp2.error.log;

    rewrite_log on;

    passenger_enabled on;
}</code></pre>
</div>


<p>Obviously the above steps do not settle it all. We need to create our web app.</p>

<div>
  <pre><code class='bash'>rails new webapp1
rails new webapp2</code></pre>
</div>


<p>Create a ~/.rvmrc to trust your .rvmrc project files and (create) load the project specific gemset</p>

<div>
  <pre><code class='bash'>rvm_trust_rvmrcs_flag=1

if [[ -s &quot;/usr/local/rvm/gems/ruby-1.9.2-p290@webapp1&quot; ]] ; then
  . &quot;/usr/local/rvm/gems/ruby-1.9.2-p290@webapp1&quot;
else
  rvm --create use  &quot;1.9.2@webapp1&quot;
fi</code></pre>
</div>


<p>Here comes another part.</p>

<p>Unlike <a href="http://httpd.apache.org/docs/2.0/mod/mod_env.html">Apache&#8217;s SetEnv feature</a>, nginx does not allow setting of environment variable rather relies on the shell for environment variables.</p>

<p>Passenger on the other hand is a shel script and will use the default settings of the shell if the rails application does not specify its own settings.</p>

<p>To avoid this problem, you need to set environment variable for each application (webapp1 and webapp2).</p>

<p>To do this edit config/production.rb with the following:</p>

<div>
  <pre><code class='ruby'>WebApp1::Application.configure do
# Settings specified here will take precedence over those in config/application.rb

  # Code is not reloaded between requests
  config.cache_classes = true #..........
# .....................................
end

#paste this at the bottom and edit this part with your own relevant paths

ENV[&#39;GEM_HOME&#39;]=&#39;/usr/local/rvm/gems/ruby-1.9.2-p290@webapp1/gems&#39; # take note for webapp2 it will be /usr/local/rvm/gems/ruby-1.9.2-p290@webapp2/gems
ENV[&#39;GEM_PATH&#39;]=&#39;/usr/local/rvm/gems/ruby-1.9.2-p290@webapp1/gems:/usr/local/rvm/gems/ruby-1.9.2-p290@global/gems&#39;
ENV[&#39;PATH&#39;]=&#39;/usr/local/rvm/gems/ruby-1.9.2-p290@webapp1/bin:$PATH&#39;
ENV[&#39;MY_RUBY_HOME&#39;]=&#39;/usr/local/rvm/wrappers/ruby-1.9.2-p290@webapp1/ruby&#39;</code></pre>
</div>


<p>The above will set the environment variable for the rails application to the gemset folder <em>/usr/local/rvm/gems/ruby-1.9.2-p290@webapp1/gems</em> as well as all others.</p>

<p>Next you need to create a in the config folder setup_load_paths.rb this is well explained in <a href="http://beginrescueend.com/integration/passenger/">this post</a>
Copy and paste the following:</p>

<div>
  <pre><code class='ruby'>if ENV[&#39;MY_RUBY_HOME&#39;] &amp;&amp; ENV[&#39;MY_RUBY_HOME&#39;].include?(&#39;rvm&#39;)
  begin
    rvm_path = File.dirname(File.dirname(ENV[&#39;MY_RUBY_HOME&#39;]))
    rvm_lib_path = File.join(rvm_path, &#39;lib&#39;)
    $LOAD_PATH.unshift rvm_lib_path
    require &#39;rvm&#39;
    RVM.use_from_path! File.dirname(File.dirname(__FILE__))
  rescue LoadError
    # RVM is unavailable at this point.
    raise &quot;RVM ruby lib is currently unavailable.&quot;
  end
end

# Pick the lines for your version of Bundler
# If you&#39;re not using Bundler at all, remove all of them

# Require Bundler 1.0
ENV[&#39;BUNDLE_GEMFILE&#39;] = File.expand_path(&#39;../Gemfile&#39;, File.dirname(__FILE__))
require &#39;bundler/setup&#39;

# Require Bundler 0/9
# if File.exist?(&quot;.bundle/environment.rb&quot;)
#   require &#39;.bundle/environment&#39;
# else
#   require &#39;rubygems&#39;
#   require &#39;bundler&#39;
#   Bundler.setup
# end</code></pre>
</div>


<p>Now last part is the Capistrano recipe to compliment the above setting.</p>

<div>
  <pre><code class='bash'># First of all create capistrano files with this
capify .</code></pre>
</div>


<p>Following the above copy this part to the Capfile:</p>

<div>
  <pre><code class='ruby'># this part goes in the Capfile which is located in the root of your rails app

# Add RVM&#39;s lib directory to the load path.
$:.unshift(File.expand_path(&#39;./lib&#39;, ENV[&#39;rvm_path&#39;]))
# Load RVM&#39;s capistrano plugin.
require &quot;rvm/capistrano&quot;
# Set it to the ruby + gemset of your app, e.g:
set :rvm_ruby_string, &#39;1.9.2@webapp1&#39;</code></pre>
</div>




<div>
  <pre><code class='ruby'>#this part goes in the deploy.rb file inside the config in your rails app

require &#39;bundler/capistrano&#39;
set :application, &quot;webapp1.com&quot;

set :domain, &quot;www.domain.com&quot;
set :environment, &quot;production&quot;
set :branch, &quot;master&quot;
set :deploy_to, &quot;/var/www/path/to/www/webapp1&quot;

role :app, domain
role :web, domain
role :db, domain, :primary =&gt; true

default_run_options[:pty] = true

default_run_options[:shell] = &#39;bash&#39;

default_environment[&quot;RAILS_ENV&quot;] = &#39;production&#39;

set :repository, &quot;git@ domain.com/webapp1.git&quot;
set :deploy_via, :remote_cache

# If you aren&#39;t using Subversion to manage your source code, specify
# your SCM below:
set :scm, :git
set :scm_verbose, true
set :use_sudo, false
set :ssh_options, :forward_agent =&gt; true

set :user, &quot;deployerbot&quot;
set :keep_releases, 7

set :default_environment, {
    &#39;PATH&#39; =&gt; &quot;/usr/local/rvm/gems/ruby-1.9.2-p290@webapp1/gems/bin:$PATH&quot;,
    &#39;RUBY_VERSION&#39; =&gt; &#39;ruby 1.9.2&#39;,
    &#39;GEM_HOME&#39; =&gt; &#39;/usr/local/rvm/gems/ruby-1.9.2-p290@webapp1/gems&#39;,
    &#39;GEM_PATH&#39; =&gt; &#39;/usr/local/rvm/gems/ruby-1.9.2-p290@webapp1/gems:/usr/local/rvm/gems/ruby-1.9.2-p290@global/gems&#39;,
    &#39;BUNDLE_PATH&#39; =&gt; &#39;//usr/local/rvm/gems/ruby-1.9.2-p290@webapp1/gems&#39; # If using bundler.
}

namespace :deploy do
  desc &quot;restarting&quot;
  task :restart do
    run &quot;touch #{current_path}/tmp/restart.txt&quot;
  end

  desc &quot;symlink vendor to shared vendor&quot;
  task :symlink_vendor_to_shared_vendor do
    run &quot;ln -s #{current_path}/../shared/vendor #{current_path}/vendor&quot;
  end

  desc &quot;trust rvmrc&quot;
  task :trust_rvmrc do
    run &quot;rvm rvmrc trust #{release_path}&quot;
  end
end

after &#39;deploy:symlink&#39;, &#39;deploy:symlink_vendor_to_shared_vendor&#39;, &#39;deploy:trust_rvmrc&#39;</code></pre>
</div>


<p>Next do</p>

<div>
  <pre><code class='bash'>cap deploy:setup
cap deploy:cold
cap deploy</code></pre>
</div>


<p>On the server you want to load each application&#8217;s gemset and do bundle install</p>

<div>
  <pre><code class='bash'>rvm use 1.9.2@webapp1
cd /var/www/path/to/www/webapp1
bundle install

rvm use 1.9.2@webapp2
cd /var/www/path/to/www/webapp2
bundle install</code></pre>
</div>


<p>Do keep in mind, that if you start nginx manually, including the sudo -E will inform sudo to preserve your environment. If this is not done, sudo will possibly reset all your environment variables.</p>

<div>
  <pre><code class='bash'>cd /etc/nginx/sbin/
sudo -E ./nginx</code></pre>
</div>


<p>After doing this, nginx is sure to use the your chosen set of configuration.</p>

<p>Here ends the deployment notes, please feel free to comment below.</p>

<p>And away we go ! Ciao for now..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Postgres gem native extension error]]></title>
    <link href="http://ikennaokpala.com/blog/postgres-native-extension-error"/>
    <updated>2011-12-27T01:27:33+00:00</updated>
    <id>http://ikennaokpala.com/blog/postgres-native-extension-error</id>
    <content type="html"><![CDATA[<p>I hit this error when installing the pg gem for using postgresql with rails apps.</p>

<!--more-->


<div>
  <pre><code class='bash'>Gem::Installer::ExtensionBuildError: ERROR: Failed to build gem native extension.

        /Users/userx/.rvm/rubies/ruby-1.9.2-p290/bin/ruby extconf.rb
checking for pg_config... no
No pg_config... trying anyway. If building fails, please try again with
 --with-pg-config=/path/to/pg_config
checking for libpq-fe.h... no
Can&#39;t find the &#39;libpq-fe.h header
*** extconf.rb failed ***
Could not create Makefile due to some reason, probably lack of
necessary libraries and/or headers.  Check the mkmf.log file for more
details.  You may need configuration options.

Provided configuration options:
    --with-opt-dir
    --without-opt-dir
    --with-opt-include
    --without-opt-include=${opt-dir}/include
    --with-opt-lib
    --without-opt-lib=${opt-dir}/lib
    --with-make-prog
    --without-make-prog
    --srcdir=.
    --curdir
    --ruby=/Users/kengimel/.rvm/rubies/ruby-1.9.2-p290/bin/ruby
    --with-pg
    --without-pg
    --with-pg-dir
    --without-pg-dir
    --with-pg-include
    --without-pg-include=${pg-dir}/include</code></pre>
</div>


<p>I already have postgres installed, so what? it appears postgres does not know when to find the its native extension files.</p>

<p>To solve you need to locate bin directory for your postgresql in the Library directory. Depending the version of postgres you are running, the path to the bin folder may differ.</p>

<p>including the below to you .bashrc or .bash_profile or .profile or .zshrc will do the trick :)</p>

<div>
  <pre><code class='bash'>PATH=${PATH}:/Library/PostgreSQL/9.1/bin
source .zshrc
gem install pg</code></pre>
</div>


<p>For centos users <a href="http://serverfault.com/questions/316703/how-to-install-libpq-dev-on-centos-5-5">this post</a> could be of help.
 and/or
Prepend with a variable assignment for PATH with the location of the pg_config file, for example:</p>

<div>
  <pre><code class='bash'>export PATH=/usr/pgsql-9.1/bin:$PATH
source .bashrc
gem install pg</code></pre>
</div>


<p>Check that postgres is running:</p>

<p>service postgresql-9.1 status</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx: 403 Forbidden (Error)]]></title>
    <link href="http://ikennaokpala.com/blog/nginx-403-forbidden-error"/>
    <updated>2011-12-25T01:27:18+00:00</updated>
    <id>http://ikennaokpala.com/blog/nginx-403-forbidden-error</id>
    <content type="html"><![CDATA[<div>
  <pre><code class='bash'>2011/12/25 21:07:03 [error] 23#0: *2 directory index of &quot;/path/to/public/&quot; is forbidden, client: 8.1.7.22, server: xxx.com, request: &quot;GET / HTTP/1.1&quot;, host: &quot;xxx.com&quot;</code></pre>
</div>


<p>This is not the first time i hit this kinda error and i go ok i will check my permissions settings.</p>

<!--more-->


<p>And Oops!, that does not seem to be the issue. Then i go ok need to check and modify access rights of the user www-data and group www-data in the nginx.conf. But No!.</p>

<p>An then as usual i go hunting in the dark not knowing what i am really up against. For me this happens.. :(</p>

<p>But in this case i was shocked to  find out that the actual issue was with the mod passenger definition in the various conf files i had created.</p>

<p>I came to realise that i was configuring the very wrong way:</p>

<p>This appears not to work.</p>

<div>
  <pre><code class='bash'>server {
  listen 80;
  server_name xxx.com;
  access_log  /var/log/access.log;
  passenger_enabled on;

  location / {
    root /path/to/public;
    index index.html index.htm;
  }
}
 or
server {
    listen 80 default;
    server_name localhost;
    location / {
        root /usr/share/nginx/html/;
        expires 1d;
    }
}</code></pre>
</div>


<p>While this seems right:</p>

<div>
  <pre><code class='bash'>server {
  listen 80;
  server_name xxx.com;
  access_log  /var/log/access.log;
  passenger_enabled on;
}</code></pre>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automate Bundler (Check and Install) with Capistrano]]></title>
    <link href="http://ikennaokpala.com/blog/automate-bundler-check-and-install-with-capistrano"/>
    <updated>2011-12-18T23:27:43+00:00</updated>
    <id>http://ikennaokpala.com/blog/automate-bundler-check-and-install-with-capistrano</id>
    <content type="html"><![CDATA[<p>I mistakenly emptied my RVM gemset which affected all the gems that where stored within.</p>

<div>
  <pre><code class='bash'>/usr/local/rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1/rubygems/dependency.rb:247:in `to_specs&#39;: Could not find bundler (&gt;= 0) amongst [] (Gem::LoadError)</code></pre>
</div>




<!--more-->


<p>I then looked through my Capistrano script and went like this can be automated.
After googling i found <a href="http://pivotallabs.com/users/chad/blog/articles/1208-automating-bundler-in-your-deploy">this</a> but not quite what i had in mind</p>

<p>After hacking around with maroon 5 playing in the background, on a very cool winter afternoon.. i finally landed at this:</p>

<div>
  <pre><code class='ruby'>namespace :deploy do
  desc &quot;Install bundler&quot;
  task :bundle_install do
    begin
      run &quot;bundle install&quot;
    rescue
      gem_install_bundler
    end
  end

  desc &quot;installs Bundler if it is not already installed&quot;
  task :gem_install_bundler, :roles =&gt; :app do
    run &quot;gem install bundler &amp;&amp; bundle install&quot;
  end
end</code></pre>
</div>


<p>You can override to include this in deploy:cold as well like this:</p>

<div>
  <pre><code class='ruby'>namespace :deploy do
  task :cold do
    update
    bundle_install
  end
  desc &quot;Install bundler&quot;
  task :bundle_install do
    begin
      run &quot;bundle install&quot;
    rescue
      gem_install_bundler
    end
  end

  desc &quot;installs Bundler if it is not already installed&quot;
  task :gem_install_bundler, :roles =&gt; :app do
    run &quot;gem install bundler &amp;&amp; bundle install&quot;
  end
end</code></pre>
</div>


<p>Yes i am aware i am breaking the rules here.. please lets discuss below.. Drop me a line. :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Amending Git commits]]></title>
    <link href="http://ikennaokpala.com/blog/amending-git-commits"/>
    <updated>2011-12-13T16:55:57+00:00</updated>
    <id>http://ikennaokpala.com/blog/amending-git-commits</id>
    <content type="html"><![CDATA[<p>In my experience with <a href="http://git-scm.com/">Git</a>, i have run into situations where i had made a commit in error, especially when resolving merge conflicts or sometimes i find my commit very non descriptive and need amending.</p>

<p>To remove a commit made in error entirely do:</p>

<!--more-->


<div>
  <pre><code class='bash'>git reset --soft HEAD~1
 # and then
git reset --hard # this will reset the current branch</code></pre>
</div>


<p>Another issue that may arise is, may be you have already push the unwanted change in error to the remote origin branch.
No worries at all, Git is very forgiving.</p>

<p>After you must have done the above steps do this to update (rewind) remote origin.</p>

<div>
  <pre><code class='bash'>git push origin head -f</code></pre>
</div>


<p>To amend commit message i do:</p>

<div>
  <pre><code class='bash'>git commit --amend</code></pre>
</div>


<p>Another scenario where git shines is amending commits.. May be you are working from a new system and have not set the git config &#8211;globla user.email to the right email address.
All that is required is running this command:</p>

<div>
  <pre><code class='bash'>git commit --amend --author=username@domain.com</code></pre>
</div>


<p>It all depend on what part of your commit you would like to change. for a full usage guide do:</p>

<div>
  <pre><code class='bash'>git commit --usage</code></pre>
</div>


<p>To stop tracking changes on a commited file do</p>

<div>
  <pre><code class='bash'>git update-index --assume-unchanged &lt;path-to-file&gt;</code></pre>
</div>


<p>if need be to continue tracking changes again run the following command:</p>

<div>
  <pre><code class='bash'>git update-index --no-assume-unchanged &lt;path-to-file&gt;</code></pre>
</div>


<p>At some point there may be a couple of commits that you would like to delete, edit or include, or possibly the commit is branching off irregularly.</p>

<p>No worries this git command will interactively see you through (i advise reading through the messages as you go):</p>

<div>
  <pre><code class='bash'>git rebase -i HEAD~5 # 5 here is the position of the very last commit you want to edit</code></pre>
</div>


<p>Ciao !!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Capistrano: “Permissions are too open … private key will be ignored”]]></title>
    <link href="http://ikennaokpala.com/blog/capistrano-permissions-are-too-open-private-key-will-be-ignored"/>
    <updated>2011-12-05T00:32:37+00:00</updated>
    <id>http://ikennaokpala.com/blog/capistrano-permissions-are-too-open-private-key-will-be-ignored</id>
    <content type="html"><![CDATA[<p>While trying to login to a remote server with my .ssh credentials on it.. i notice capistrano&#8217;s warning:</p>

<div>
  <pre><code class='bash'>** [out ::domain.com] @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 ** [out :: domain.com] @         WARNING: UNPROTECTED PRIVATE KEY FILE!          @
 ** [out :: domain.com] @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 ** [out :: domain.com] Permissions 0755 for &#39;~/.ssh/id_rsa&#39; are too open.
 ** [out :: domain.com] It is recommended that your private key files are NOT accessible by others.</code></pre>
</div>


<p>The problem being that my ssh private key was then public rather than private.</p>

<p>To Fix:</p>

<!--more-->


<div>
  <pre><code class='bash'>chmod 600 ~/.ssh/id_rsa

#or you could also do

chmod a-rwx ~/.ssh/id_rsa
chmod u+rw ~/.ssh/id_rsa</code></pre>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant could not detect VirtualBox!]]></title>
    <link href="http://ikennaokpala.com/blog/984"/>
    <updated>2011-12-04T10:22:31+00:00</updated>
    <id>http://ikennaokpala.com/blog/984</id>
    <content type="html"><![CDATA[<p>if you run into this error</p>

<div>
  <pre><code class='bash'>=====================================================================
Vagrant experienced an error!

Vagrant could not detect VirtualBox! Make sure VirtualBox is properly installed.
If VirtualBox is installed, it may be an incorrect version. Vagrant currently
requires VirtualBox 3.2.x. Please install the proper version to continue.
=====================================================================</code></pre>
</div>




<!--more-->


<p>Know ye! that you may be using an older version of vagrant&#8230;</p>

<p>Solution is to do gem install vagrant -v=&#8217;0.8.8&#8217; or edit your Gemfile to include gem &#8216;vagrant&#8217;, &#8216;=0.8.8&#8217;</p>

<p>hope that helps..</p>
]]></content>
  </entry>
  
</feed>
