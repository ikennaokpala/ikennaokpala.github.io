<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: POSTGRESQL | Ikenna Okpala]]></title>
  <link href="http://ikennaokpala.com/blog/categories/postgresql/atom.xml" rel="self"/>
  <link href="http://ikennaokpala.com/"/>
  <updated>2016-01-03T17:19:36+00:00</updated>
  <id>http://ikennaokpala.com/</id>
  <author>
    <name><![CDATA[Ikenna Okpala]]></name>
    <email><![CDATA[me@ikennaokpala.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Debot gem 0.0.1 released: (Capistrano recipes for Ruby, Rails, Ngnix, Unicorn and Postgres setup)]]></title>
    <link href="http://ikennaokpala.com/blog/debot-gem-0-0-1-released-custom-recipes-for-ruby-rails-app-ngnix-unicorn-and-postgres-setup"/>
    <updated>2012-07-24T16:47:28+01:00</updated>
    <id>http://ikennaokpala.com/blog/debot-gem-0-0-1-released-custom-recipes-for-ruby-rails-app-ngnix-unicorn-and-postgres-setup</id>
    <content type="html"><![CDATA[<p>I just launched <a href="https://github.com/kengimel/debot">debot</a> a gem with custom recipes that extend capistrano for provisioning and deploying rails application to a VPS with ruby (via rubyenv), nginx, postgresql and unicorn..</p>

<!--more-->


<p>For more details <a href="https://github.com/kengimel/debot/blob/master/README.md">Click here </a></p>

<p>NB: I am just pouring out ideas on this gem, as i use it on multiple projects. it is under constant development. You are welcome to contribute, try it out and give feeback</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remote access to PostgreSQL server and Removing Postgres]]></title>
    <link href="http://ikennaokpala.com/blog/remote-access-to-postgresql-server-14"/>
    <updated>2012-06-08T15:43:50+01:00</updated>
    <id>http://ikennaokpala.com/blog/remote-access-to-postgresql-server-14</id>
    <content type="html"><![CDATA[<p>This is a very common requirement for remote staging environments.</p>

<p>All that is required is edit postgressql.conf and pg_hba.conf files.</p>

<p>To get going on this it maybe worthy of note to first search for these files.</p>

<!--more-->


<p><div>
  <pre><code class='bash'>&lt;/p&gt;

&lt;p&gt;find / -name &quot;postgresql.conf&quot;</code></pre>
</div>
</p>

<p>Because locations for these files may differ per operating system (i.e Linux distros)</p>

<p>For this post the location should match Ubuntu/Debian.</p>

<p>For Ubuntu these files are located in "/etc/postgresql/9.1/main" so cd there.</p>

<p>First edit the postgresql.conf, by adding this to the file "listen_addresses = '*'"</p>

<p><div>
  <pre><code class='bash'>listen_addresses = &#39;*&#39;</code></pre>
</div>
</p>

<p>Next stop edit the pg_hba.conf, add the below close to the end of the file.</p>

<p><div>
  <pre><code class='bash'>&lt;/p&gt;

&lt;p&gt;host    all             all             0.0.0.0/0               md5</code></pre>
</div>
</p>

<p>Finally restart postgresql:</p>

<p><div>
  <pre><code class='bash'>&lt;/p&gt;

&lt;p&gt;service postgresql restart</code></pre>
</div>
</p>

<p>OR</p>

<p><div>
  <pre><code class='bash'>&lt;/p&gt;

&lt;p&gt;/etc/init.d/postgresql restart</code></pre>
</div>
</p>

<p>To remove the EnterpriseDB One-Click install of PostgreSQL 9.1:</p>

<p>Open a terminal window</p>

<p>Utilities->Terminal</p>

<p>Run the uninstaller</p>

<p>sudo /Library/PostgreSQL/9.1/uninstall-postgresql.app/Contents/MacOS/installbuilder.sh</p>

<p>If you installed with the Postgres Installer, you can do:</p>

<p>open /Library/PostgreSQL/9.2/uninstall-postgresql.app</p>

<p>It will ask for the administrator password and run the uninstaller.</p>

<p>Remove the PostgreSQL and data folders (Wizard will notify you that these were not removed)</p>

<p>sudo rm -rf /Library/PostgreSQL</p>

<p>Remove the ini file</p>

<p>sudo rm /etc/postgres-reg.ini</p>

<p>Remove the PostgreSQL user</p>

<p>System Preferences -> Users &amp; Groups</p>

<p>Unlock the settings panel by clicking on the padlock and enter your password</p>

<p>Select the PostgreSQL user and click on the minus button.</p>

<p>Restore your shared memory settings</p>

<p>sudo rm /etc/sysctl.conf</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Postgres gem native extension error]]></title>
    <link href="http://ikennaokpala.com/blog/postgres-native-extension-error"/>
    <updated>2011-12-27T01:27:33+00:00</updated>
    <id>http://ikennaokpala.com/blog/postgres-native-extension-error</id>
    <content type="html"><![CDATA[<p>I hit this error when installing the pg gem for using postgresql with rails apps.</p>

<!--more-->


<p><div>
  <pre><code class='bash'>&lt;/p&gt;

&lt;p&gt;Gem::Installer::ExtensionBuildError: ERROR: Failed to build gem native extension.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    /Users/userx/.rvm/rubies/ruby-1.9.2-p290/bin/ruby extconf.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;checking for pg_config... no
No pg_config... trying anyway. If building fails, please try again with
 --with-pg-config=/path/to/pg_config
checking for libpq-fe.h... no
Can&#39;t find the &#39;libpq-fe.h header
&lt;strong&gt;&lt;em&gt; extconf.rb failed &lt;/em&gt;&lt;/strong&gt;
Could not create Makefile due to some reason, probably lack of
necessary libraries and/or headers.  Check the mkmf.log file for more
details.  You may need configuration options.&lt;/p&gt;

&lt;p&gt;Provided configuration options:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--with-opt-dir
--without-opt-dir
--with-opt-include
--without-opt-include=${opt-dir}/include
--with-opt-lib
--without-opt-lib=${opt-dir}/lib
--with-make-prog
--without-make-prog
--srcdir=.
--curdir
--ruby=/Users/kengimel/.rvm/rubies/ruby-1.9.2-p290/bin/ruby
--with-pg
--without-pg
--with-pg-dir
--without-pg-dir
--with-pg-include
--without-pg-include=${pg-dir}/include
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;</code></pre>
</div>
</p>

<p>I already have postgres installed, so what? it appears postgres does not know when to find the its native extension files.</p>

<p>To solve you need to locate bin directory for your postgresql in the Library directory. Depending the version of postgres you are running, the path to the bin folder may differ.</p>

<p>including the below to you .bashrc or .bash_profile or .profile or .zshrc will do the trick :)
<div>
  <pre><code class='bash'>&lt;/p&gt;

&lt;p&gt;PATH=${PATH}:/Library/PostgreSQL/9.1/bin
source .zshrc
gem install pg</code></pre>
</div>
</p>

<p>For centos users <a href="http://serverfault.com/questions/316703/how-to-install-libpq-dev-on-centos-5-5">this post</a> could be of help.
 and/or
Prepend with a variable assignment for PATH with the location of the pg_config file, for example:</p>

<p><div>
  <pre><code class='bash'>&lt;/p&gt;

&lt;p&gt;export PATH=/usr/pgsql-9.1/bin:$PATH
source .bashrc
gem install pg</code></pre>
</div>
</p>

<p>Check that postgres is running:</p>

<p>service postgresql-9.1 status</p>
]]></content>
  </entry>
  
</feed>
