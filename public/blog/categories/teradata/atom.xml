<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: TERADATA | Ikenna Okpala]]></title>
  <link href="http://ikennaokpala.com/blog/categories/teradata/atom.xml" rel="self"/>
  <link href="http://ikennaokpala.com/"/>
  <updated>2016-01-03T17:52:01+00:00</updated>
  <id>http://ikennaokpala.com/</id>
  <author>
    <name><![CDATA[Ikenna Okpala]]></name>
    <email><![CDATA[me@ikennaokpala.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Look At Teradata AMPs]]></title>
    <link href="http://ikennaokpala.com/blog/a-look-at-Teradata-AMPs-"/>
    <updated>2013-10-09T03:22:18+01:00</updated>
    <id>http://ikennaokpala.com/blog/a-look-at-Teradata-AMPs-</id>
    <content type="html"><![CDATA[<p>If you are from a music background and may be reading/hearing this for the first time, then 'NO', this article is not about measuring the change over individual spatial periods (sound amplification).</p>

<p>This article 'YES' seeks to share my own notes on Teradata's Access Module Processor or AMP for short.</p>

<p>AMP is a Virtual processor that exist within the confines of the parallel-processing environment of the Teradata Database.</p>

<!--more-->


<p>AMP manages communication through Boardless BYNET interface, performs database (Output data conversion, Manage Disk space, Accounting, Journaling, Locking, Joining, Sorting, Agreegation) disk subsytem manipulation and database file subsytem task management.</p>

<p>An individual AMP instance within teradata takes charge of access and manipulation of data. In this respect, an AMP is allocated a portion of the database as an area of operation, this includes physical disk for storing its tables. Teradata's AMP acquires some space in the disk through its association with a virtual disk (vdisk).</p>

<p>This then allows it to read and write to disk, these then make-up the AMP steps to physical blocks of data that were queried. It takes handles the accessing, processing and manipulation of the data. More than one AMP may exist in one node, communicating with themselves through BYNET.</p>

<p>AMPs offers basic SQL query parallelism to data blocks/jobs in Teradata. The parallel processing through occurs after, Teradata has pre-defined the number of AMP nodes be used. This is highly influenced by indexes and how many data blocks that can be derived from the query.</p>

<p>Teradata divides these to the defined AMPs using hash functions to enable subquery-level parallel processing.</p>

<p>Base on this teradata's query transaction executes in a parallel manner across the defined AMPs, with associated chunks of data processed independently though in a simultaneous manner.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Teradata ODBC for Ruby development]]></title>
    <link href="http://ikennaokpala.com/blog/install-teradata-odbc-for-ruby-development"/>
    <updated>2013-05-15T02:23:58+01:00</updated>
    <id>http://ikennaokpala.com/blog/install-teradata-odbc-for-ruby-development</id>
    <content type="html"><![CDATA[<p><strong>To install Teradata for ruby development, first it is advisable to install it on a 32 bit linux based VM.</strong></p>

<p>  <strong><em> Given the above, the following steps should work ok:</em></strong></p>

<ul>
<li><p>Download the teradata CLIv2 and ODBC Driver from <a href="http://downloads.teradata.com/download">http://downloads.teradata.com/download</a></p></li>
<li><p> Download Teradata's Ruby native access interface from <a href="http://downloads.teradata.com/download">http://sourceforge.net/projects/rubycli/</a></p></li>
</ul>


<!--more-->


<ul>
<li><p>Install RPM:
<code>bash
  sudo apt-get install rpm
</code></p></li>
<li><p> Open up the cliv2:</p>

<p><code>bash
  tar -xvf  cliv2_LINUX_indep.14.00.00.07.tar.gz
</code></p></li>
<li><p> Change directory  and Install cliv2:</p>

<p><code>bash
  sudo rpm -ivh --nodeps cliv2-14.00.00.07-1.noarch.rpm
</code></p></li>
<li><p> Change directory to tdicu:</p>

<p><code>bash
   sudo rpm -ivh --nodeps tdicu-14.00.00.00-1.noarch.rpm
</code></p></li>
<li><p> Change directory to TeraGSS and install:
<code>bash
  sudo rpm -ivh --nodeps TeraGSS_linux_x64-14.00.02.07-1.noarch.rpm
</code></p></li>
<li><p> Open up tdodbc:</p>

<p><code>bash
  tar -xvf tdodbc__linux_indep.14.00.00.04-1.tar.gz
</code></p></li>
<li><p> Change dorectory to tdodbc:</p>

<p><code>bash
  sudo rpm -ivh --nodeps tdodbc-14.00.00.04-1.noarch.rpm
</code></p></li>
</ul>


<p>NB: tdodbc may also contain tdicu and TeraGSS you may want to ignore these as you may have already installed them.</p>

<ul>
<li><p>Change directory to rubycli-1.0.0 and run the following commands:
<code>bash
  make unix &amp;&amp; ruby setup.rb install
</code></p></li>
<li><p>Add these paths to your .zshrc or .bashrc or .bash_profile files</p>

<p>```bash</p>

<h1>export LD_LIBRARY_PATH=/opt/teradata/client/14.00/lib</h1>

<p>export COPLIB=/opt/teradata/client/14.00/lib
export COPERR=/opt/teradata/client/14.00/lib
export LD_LIBRARY_PATH=/opt/teradata/client/14.00/tbuild/lib:/opt/teradata/client/14.00/lib
```</p></li>
<li><p> Finally download or obtain the the 32bit version of the following files:
bteq, fastload, fexp, mload, ppcmain</p>

<p>```bash
sudo mkdir -p  /opt/teradata/client/14.00/bin</p>

<h1>copy files from where you have downloaded them to</h1>

<p>sudo cp -R bin/<em> /opt/teradata/client/14.00/bin
sudo chown -R root:root /opt/teradata/client/14.00/bin/</em>
sudo chmod +x /opt/teradata/client/14.00/bin/*
```</p></li>
</ul>


<p>NB: Check that all the dependencies for each of the bin stubs are present.
example:</p>

<pre><code>```bash
  ldd fexp
```
</code></pre>

<p>You may observe that the libpm.so file 32 bit version is not present, so you then copy the file like this:</p>

<p>  <code>bash
  cp /path to /client/14.00/lib/libpm.so /opt/teradata/client/14.00/lib
 </code></p>

<p>After this you should be rarring and ready to go.</p>
]]></content>
  </entry>
  
</feed>
