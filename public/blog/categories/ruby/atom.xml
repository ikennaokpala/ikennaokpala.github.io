<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: RUBY | Ikenna Okpala]]></title>
  <link href="http://ikennaokpala.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://ikennaokpala.com/"/>
  <updated>2016-01-03T18:05:00+00:00</updated>
  <id>http://ikennaokpala.com/</id>
  <author>
    <name><![CDATA[Ikenna Okpala]]></name>
    <email><![CDATA[me@ikennaokpala.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using .ruby-version with pow]]></title>
    <link href="http://ikennaokpala.com/blog/pow-ruby-version"/>
    <updated>2013-06-09T02:23:58+01:00</updated>
    <id>http://ikennaokpala.com/blog/pow-ruby-version</id>
    <content type="html"><![CDATA[<p><strong>If you probably upgraded to the latest RVM and you got the message like i did to use ruby-version and ruby-gemset and you bought the idea.. The below helps set parity with the former.</strong></p>

<p>```bash
  if [ -f "$rvm_path/scripts/rvm" ] &amp;&amp; [ -f ".ruby-version" ] &amp;&amp; [ -f ".ruby-gemset" ]; then</p>

<pre><code>source "$rvm_path/scripts/rvm"
rvm use `cat .ruby-version`@`cat .ruby-gemset`
</code></pre>

<p>  fi
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Teradata ODBC for Ruby development]]></title>
    <link href="http://ikennaokpala.com/blog/install-teradata-odbc-for-ruby-development"/>
    <updated>2013-05-15T02:23:58+01:00</updated>
    <id>http://ikennaokpala.com/blog/install-teradata-odbc-for-ruby-development</id>
    <content type="html"><![CDATA[<p><strong>To install Teradata for ruby development, first it is advisable to install it on a 32 bit linux based VM.</strong></p>

<p>  <strong><em> Given the above, the following steps should work ok:</em></strong></p>

<ul>
<li><p>Download the teradata CLIv2 and ODBC Driver from <a href="http://downloads.teradata.com/download">http://downloads.teradata.com/download</a></p></li>
<li><p> Download Teradata's Ruby native access interface from <a href="http://downloads.teradata.com/download">http://sourceforge.net/projects/rubycli/</a></p></li>
</ul>


<!--more-->


<ul>
<li><p>Install RPM:
<code>bash
  sudo apt-get install rpm
</code></p></li>
<li><p> Open up the cliv2:</p>

<p><code>bash
  tar -xvf  cliv2_LINUX_indep.14.00.00.07.tar.gz
</code></p></li>
<li><p> Change directory  and Install cliv2:</p>

<p><code>bash
  sudo rpm -ivh --nodeps cliv2-14.00.00.07-1.noarch.rpm
</code></p></li>
<li><p> Change directory to tdicu:</p>

<p><code>bash
   sudo rpm -ivh --nodeps tdicu-14.00.00.00-1.noarch.rpm
</code></p></li>
<li><p> Change directory to TeraGSS and install:
<code>bash
  sudo rpm -ivh --nodeps TeraGSS_linux_x64-14.00.02.07-1.noarch.rpm
</code></p></li>
<li><p> Open up tdodbc:</p>

<p><code>bash
  tar -xvf tdodbc__linux_indep.14.00.00.04-1.tar.gz
</code></p></li>
<li><p> Change dorectory to tdodbc:</p>

<p><code>bash
  sudo rpm -ivh --nodeps tdodbc-14.00.00.04-1.noarch.rpm
</code></p></li>
</ul>


<p>NB: tdodbc may also contain tdicu and TeraGSS you may want to ignore these as you may have already installed them.</p>

<ul>
<li><p>Change directory to rubycli-1.0.0 and run the following commands:
<code>bash
  make unix &amp;&amp; ruby setup.rb install
</code></p></li>
<li><p>Add these paths to your .zshrc or .bashrc or .bash_profile files</p>

<p>```bash</p>

<h1>export LD_LIBRARY_PATH=/opt/teradata/client/14.00/lib</h1>

<p>export COPLIB=/opt/teradata/client/14.00/lib
export COPERR=/opt/teradata/client/14.00/lib
export LD_LIBRARY_PATH=/opt/teradata/client/14.00/tbuild/lib:/opt/teradata/client/14.00/lib
```</p></li>
<li><p> Finally download or obtain the the 32bit version of the following files:
bteq, fastload, fexp, mload, ppcmain</p>

<p>```bash
sudo mkdir -p  /opt/teradata/client/14.00/bin</p>

<h1>copy files from where you have downloaded them to</h1>

<p>sudo cp -R bin/<em> /opt/teradata/client/14.00/bin
sudo chown -R root:root /opt/teradata/client/14.00/bin/</em>
sudo chmod +x /opt/teradata/client/14.00/bin/*
```</p></li>
</ul>


<p>NB: Check that all the dependencies for each of the bin stubs are present.
example:</p>

<pre><code>```bash
  ldd fexp
```
</code></pre>

<p>You may observe that the libpm.so file 32 bit version is not present, so you then copy the file like this:</p>

<p>  <code>bash
  cp /path to /client/14.00/lib/libpm.so /opt/teradata/client/14.00/lib
 </code></p>

<p>After this you should be rarring and ready to go.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Capistrano – Could not parse object "b4042..."]]></title>
    <link href="http://ikennaokpala.com/blog/capistrano-could-not-parse-object-b40429d9b1f72ac16a22601b4c6843ff24a74e6f"/>
    <updated>2012-08-31T03:36:31+01:00</updated>
    <id>http://ikennaokpala.com/blog/capistrano-could-not-parse-object-b40429d9b1f72ac16a22601b4c6843ff24a74e6f</id>
    <content type="html"><![CDATA[<p>The above titled error gave a friend some troubles.</p>

<p>The thing is that we found out that Capistrano was failing because apparently it had lost track of the commit SHA, hence the error message:</p>

<!--more-->


<p>"Could not parse object ’b4042...′"</p>

<p>We found deleting the “cached-copy” inside the shared directory, to have made this go away at least for now.</p>

<p> </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debot gem 0.0.1 released: (Capistrano recipes for Ruby, Rails, Ngnix, Unicorn and Postgres setup)]]></title>
    <link href="http://ikennaokpala.com/blog/debot-gem-0-0-1-released-custom-recipes-for-ruby-rails-app-ngnix-unicorn-and-postgres-setup"/>
    <updated>2012-07-24T16:47:28+01:00</updated>
    <id>http://ikennaokpala.com/blog/debot-gem-0-0-1-released-custom-recipes-for-ruby-rails-app-ngnix-unicorn-and-postgres-setup</id>
    <content type="html"><![CDATA[<p>I just launched <a href="https://github.com/kengimel/debot">debot</a> a gem with custom recipes that extend capistrano for provisioning and deploying rails application to a VPS with ruby (via rubyenv), nginx, postgresql and unicorn..</p>

<!--more-->


<p>For more details <a href="https://github.com/kengimel/debot/blob/master/README.md">Click here </a></p>

<p>NB: I am just pouring out ideas on this gem, as i use it on multiple projects. it is under constant development. You are welcome to contribute, try it out and give feeback</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using homebrew with multiple users on a single machine]]></title>
    <link href="http://ikennaokpala.com/blog/using-homebrew-with-multiple-users-on-a-single-machine"/>
    <updated>2012-04-11T20:17:43+01:00</updated>
    <id>http://ikennaokpala.com/blog/using-homebrew-with-multiple-users-on-a-single-machine</id>
    <content type="html"><![CDATA[<p>I a big fan of <a href="http://mxcl.github.com/homebrew/">homebrew</a>. I have been using it for a while now and i am like a lot. But i recent hit a big headache with permission issue with another account on my Mac.</p>

<p>I installed homebrew using a previous user account, but this proved to be very unforgiving to install software from the new user account.</p>

<!--more-->


<p><div>
  <pre><code class='bash'>brew install redis
Error: Cannot write to /usr/local/Cellar</code></pre>
</div>
</p>

<p>The following steps will enable the new user and/or other users to install software with homebrew. BTW thanks for Geoff Low (glow) for helping out.</p>

<p>Firstly set the umask for the user. (inside the .bashrc or .profile or .bash_profile)</p>

<p><div>
  <pre><code class='bash'>umask 0002 # grant write permission to group</code></pre>
</div>
</p>

<p>For more on <a href="http://www.cyberciti.biz/tips/understanding-linux-unix-umask-value-usage.html">umask.</a></p>

<p>then recursively grant group write permission to /usr/local directory:
<div>
  <pre><code class='bash'>sudo chmod -R g+w /usr/local/</code></pre>
</div>
</p>

<p>then also change recursively /usr/local group to staff:
<div>
  <pre><code class='bash'>&lt;/p&gt;

&lt;p&gt;sudo chgrp -R staff /usr/local</code></pre>
</div>
</p>

<p>Do same for /Library/Caches/Homebrew (optional):
<div>
  <pre><code class='bash'>sudo chmod -R g+w /Library/Caches/Homebrew
sudo chgrp -R staff /Library/Caches/Homebrew</code></pre>
</div>
</p>

<p>Alright thats it you should be good to go now with the new user account installing software with homebrew.</p>

<p>Be sure to run and follow any further instructions:
<div>
  <pre><code class='bash'>brew doctor</code></pre>
</div>
</p>

<p>NB: It is worthy to note that homebrew by design requires that in your user profile file (i.e. .bashrc or .profile or .bash_profile), that your set /usr/local/bin ahead of /usr/bin to avoid clashes with system software tools that may exist in other paths on your machine. it is important that you override the system paths to use homebrew installations as default.</p>
]]></content>
  </entry>
  
</feed>
