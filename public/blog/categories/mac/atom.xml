<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: MAC | Ikenna Okpala]]></title>
  <link href="http://ikennaokpala.com/blog/categories/mac/atom.xml" rel="self"/>
  <link href="http://ikennaokpala.com/"/>
  <updated>2016-01-03T17:52:01+00:00</updated>
  <id>http://ikennaokpala.com/</id>
  <author>
    <name><![CDATA[Ikenna Okpala]]></name>
    <email><![CDATA[me@ikennaokpala.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using homebrew with multiple users on a single machine]]></title>
    <link href="http://ikennaokpala.com/blog/using-homebrew-with-multiple-users-on-a-single-machine"/>
    <updated>2012-04-11T20:17:43+01:00</updated>
    <id>http://ikennaokpala.com/blog/using-homebrew-with-multiple-users-on-a-single-machine</id>
    <content type="html"><![CDATA[<p>I a big fan of <a href="http://mxcl.github.com/homebrew/">homebrew</a>. I have been using it for a while now and i am like a lot. But i recent hit a big headache with permission issue with another account on my Mac.</p>

<p>I installed homebrew using a previous user account, but this proved to be very unforgiving to install software from the new user account.</p>

<!--more-->


<p><div>
  <pre><code class='bash'>brew install redis
Error: Cannot write to /usr/local/Cellar</code></pre>
</div>
</p>

<p>The following steps will enable the new user and/or other users to install software with homebrew. BTW thanks for Geoff Low (glow) for helping out.</p>

<p>Firstly set the umask for the user. (inside the .bashrc or .profile or .bash_profile)</p>

<p><div>
  <pre><code class='bash'>umask 0002 # grant write permission to group</code></pre>
</div>
</p>

<p>For more on <a href="http://www.cyberciti.biz/tips/understanding-linux-unix-umask-value-usage.html">umask.</a></p>

<p>then recursively grant group write permission to /usr/local directory:
<div>
  <pre><code class='bash'>sudo chmod -R g+w /usr/local/</code></pre>
</div>
</p>

<p>then also change recursively /usr/local group to staff:
<div>
  <pre><code class='bash'>&lt;/p&gt;

&lt;p&gt;sudo chgrp -R staff /usr/local</code></pre>
</div>
</p>

<p>Do same for /Library/Caches/Homebrew (optional):
<div>
  <pre><code class='bash'>sudo chmod -R g+w /Library/Caches/Homebrew
sudo chgrp -R staff /Library/Caches/Homebrew</code></pre>
</div>
</p>

<p>Alright thats it you should be good to go now with the new user account installing software with homebrew.</p>

<p>Be sure to run and follow any further instructions:
<div>
  <pre><code class='bash'>brew doctor</code></pre>
</div>
</p>

<p>NB: It is worthy to note that homebrew by design requires that in your user profile file (i.e. .bashrc or .profile or .bash_profile), that your set /usr/local/bin ahead of /usr/bin to avoid clashes with system software tools that may exist in other paths on your machine. it is important that you override the system paths to use homebrew installations as default.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unix "PS" command ]]></title>
    <link href="http://ikennaokpala.com/blog/unix-ps-command"/>
    <updated>2009-11-18T00:45:19+00:00</updated>
    <id>http://ikennaokpala.com/blog/unix-ps-command</id>
    <content type="html"><![CDATA[<p>Today, i meet a senior colleague in the field of software named <a href="http://joewalnes.com/">JOE WALNES</a>.</p>

<p>While i was showing Joe what i had done earlier today with <a href="http://wicket.apache.org/">WICKET</a>.</p>

<p>I was unable to run the my small <a href="http://wicket.apache.org/">WICKET</a> app, because tomcat was still running, and i was unable to  shutdown the tomcat instance that i had earlier on started on my MAC Book.</p>

<!--more-->


<p>He simply opened my eyes to the PS command on unix systems.</p>

<p>The PS command showes the unique id and related information of the currently running processes on the computer.</p>

<p>Since tomcat is java based and uses a bootstrap to run, he also exposed me to the "JPS" command.</p>

<p>This performs a similar function like the PS command, only selects processes that are java based.</p>

<p>This blog post i hope would be useful to someone out there and also serve as a reminder in case i need to come back to this in the future.</p>

<p>By issuing the PS command it generates a unique id for the system alone, so take note that the ID for processes vary from system to system, so when you apply the "kill" command remember to append the immediate ID of the process you want to shutdown.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["gem mysql install" problem on Mac OS X (Leopard)]]></title>
    <link href="http://ikennaokpala.com/blog/gem-mysql-install-problem-on-mac-os-x-leopard"/>
    <updated>2009-08-15T19:45:00+01:00</updated>
    <id>http://ikennaokpala.com/blog/gem-mysql-install-problem-on-mac-os-x-leopard</id>
    <content type="html"><![CDATA[<p>I executed the db:migrate via netbeans GUI and it threw this error:</p>

<p><div>
  <pre><code class='bash'>&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;config.breakpoint_server has been deprecated and has no effect. ********************************************************************&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;</code></pre>
</div>
</p>

<!--more-->


<p>!!! The bundled mysql.rb driver has been removed from Rails 2.2. Please install the mysql gem and try again: gem install mysql.</p>

<p>rake aborted!</p>

<p>no such file to load -- mysql</p>

<p>And obviously, I went ahead to install the mysql gem
"gem mysql install" and returned this error:</p>

<p><div>
  <pre><code class='bash'>&lt;/p&gt;

&lt;p&gt;WARNING:  Installing to ~/.gem since /Library/Ruby/Gems/1.8 and
/usr/bin aren&#39;t both writable.
WARNING:  You don&#39;t have /Users/ikenna/.gem/ruby/1.8/bin in your PATH,
gem executables will not run.
Building native extensions.  This could take a while...
ERROR:  Error installing mysql:
ERROR: Failed to build gem native extension.&lt;/p&gt;

&lt;p&gt;/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby extconf.rb
checking for mysql_query() in -lmysqlclient... no
checking for main() in -lm... yes
checking for mysql_query() in -lmysqlclient... no
checking for main() in -lz... yes
checking for mysql_query() in -lmysqlclient... no
checking for main() in -lsocket... no
checking for mysql_query() in -lmysqlclient... no
checking for main() in -lnsl... no
checking for mysql_query() in -lmysqlclient... no&lt;/p&gt;

&lt;p&gt;Gem files will remain installed in /Users/ikenna/.gem/ruby/1.8/gems/mysql-2.7 for inspection.
Results logged to /Users/ikenna/.gem/ruby/1.8/gems/mysql-2.7/gem_make.out&lt;/p&gt;

&lt;p&gt;But after googling and trying out so many versions of bash commands, Finally the solution that worked for me came.... thanks to this guy &quot;&lt;a href=&quot;http://railsforum.com/profile.php?id=26809&quot;&gt;&lt;strong&gt;kevin.sylvestre&lt;/strong&gt;&lt;/a&gt;&quot; via the &lt;a href=&quot;http://railsforum.com/viewtopic.php?id=33752&quot;&gt;Railsforum&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;</code></pre>
</div>
</p>

<p>He stated and i quote:</p>

<p>Before installing the gem you first need the MySQL binaries (<a href="http://dev.mysql.com/downloads/mysql/5.1.html">http://dev.mysql.com/downloads/mysql/5.1.html</a>). For Mac OS X use the Mac OS X 10.5 (package format) (x86). Then:</p>

<p><div>
  <pre><code class='bash'>&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;sudo env ARCHFLAGS=&quot;-arch i386&quot; gem install mysql -- \ --with-mysql-dir=/usr/local/mysql --with-mysql-lib=/usr/local/mysql/lib \ --with-mysql-include=/usr/local/mysql/include&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;</code></pre>
</div>
</p>

<p>This solution worked very well for me and i hope this could help someone else... hopefully...</p>

<p>Cheers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2002 – Can’t connect to local MySQL server through socket ‘/var/mysql/mysql.sock’]]></title>
    <link href="http://ikennaokpala.com/blog/2002-cant-connect-to-local-mysql-server-through-socket-varmysqlmysql-sock"/>
    <updated>2009-08-11T01:18:00+01:00</updated>
    <id>http://ikennaokpala.com/blog/2002-cant-connect-to-local-mysql-server-through-socket-varmysqlmysql-sock</id>
    <content type="html"><![CDATA[<p>Today, i stopped being a fan of MAMP for integrating PHP Apache and MYSQL, and i decided to setup Apache, MYSQL and PHP stack on my MAC OS X 10.5.7 (leopard) the good old way...</p>

<p>But, i encountered this error: 2002 - Can't connect to local MySQL server through socket '/var/mysql/mysql.sock' (2).</p>

<p>Wow... i then discovered funny enough, that MYSQL instance was running perfectly and i was able to connect MYSQL</p>

<!--more-->


<p>via the MYSQL Admin GUI tool.</p>

<p>I made a lucky guess asserting, that the PHP config file may be missing some info, Hmmm...</p>

<p>Well the solution goes as follows:</p>

<p>I searched for "mysql.lock" and i discovered that the MYSQL Socket file was located in "/tmp/mysql.lock.</p>

<p>Also, in the my PHP.ini file the value for "mysql.default_socket" was entirely empty "".</p>

<p>ehhhh... Run this command in Terminal to view hidden files "defaults write com.apple.finder AppleShowAllFiles TRUE" and then followed by "killall Finder".</p>

<p>Then Go to "private/etc/PHP.ini". (note: private is a hidden folder).</p>

<p>If prior to this, in "private/etc/ "folder, the PHP.ini file does not exist copy and paste it there first.</p>

<p>Now open the PHP.ini file with say BBedit or TextWrangler.</p>

<p>Use command + F to find "mysql.default_socket" and paste "/tmp/mysql.sock" as it's new value.</p>

<p>Finally restart your Apache web server with Terminal using "sudo apachectl graceful".</p>

<p>After restart, PHP will be able to make connection calls to MYSQL with no further a do or hassle.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuring Postfix on Mac (Local SMTP)]]></title>
    <link href="http://ikennaokpala.com/blog/postfixonmac"/>
    <updated>2007-06-15T23:06:00+01:00</updated>
    <id>http://ikennaokpala.com/blog/postfixonmac</id>
    <content type="html"><![CDATA[<p>During one of my hack trips.. i was required to use postfix capability. Alright i am a newbie to the Unix environment but i learnt this Hack from sniffing around with some luck on my side..</p>

<p>Well i decided to share my thoughts:</p>

<p>i tried a lot of things to try make this work, but the follow i think are the relevant steps.</p>

<!--more-->


<p>Firstly; I did this:
<div>
  <pre><code class='bash'>sudo mate /System/Library/LaunchDaemons/org.postfix.master.plist</code></pre>
</div>

and then added this lines of xml code, add following line before the closing  tag:
<div>
  <pre><code class='xml'>&lt;key&gt;RunAtLoad&lt;/key&gt; &lt;true/&gt; &lt;key&gt;KeepAlive&lt;/key&gt; &lt;true/&gt;&lt;/p&gt;

&lt;p&gt;</code></pre>
</div>
</p>

<p>then after start service with
<div>
  <pre><code class='bash'>sudo launchctl
launchd% start org.postfix.master
or simply run
sudo postfix start</code></pre>
</div>

Another thing is editing the following files:
<div>
  <pre><code class='bash'>Edit the MAILSERVER=-NO- line in /etc/hostconfig. Change it to read MAILSERVER=-YES-. Save and exit the file.
Open up /etc/postfix/main.cf, and edit these lines to reflect your setup. These are examples from my setup; yours might be different.
LINE 67: myhostname = localhost
LINE 75: mydomain = localhost
LINE 91: myorigin = $mydomain
LINE 105: inet_interfaces = all
LINE 152: mydestination = $myhostname, localhost.$mydomain
LINE 239: mynetworks_style = subnet
LINE 253: mynetworks = 192.168.0.0/23, 127.0.0.0/8
Save your work, and exit the file.
Open up /etc/postfix/master.cf, and uncomment line 77 -- change #smtp inet n - n - - smtpd to smtp inet n - n - - smtpd. Save and exit the file.</code></pre>
</div>
</p>

<p>Check that postfix SMTP mock is running:
<div>
  <pre><code class='bash'>telnet localhost 25&lt;/p&gt;

&lt;p&gt;</code></pre>
</div>
</p>
]]></content>
  </entry>
  
</feed>
