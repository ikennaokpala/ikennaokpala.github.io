<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: WEB DEVELOPMENT | Ikenna Okpala]]></title>
  <link href="http://ikennaokpala.com/blog/categories/web-development/atom.xml" rel="self"/>
  <link href="http://ikennaokpala.com/"/>
  <updated>2016-01-03T17:36:17+00:00</updated>
  <id>http://ikennaokpala.com/</id>
  <author>
    <name><![CDATA[Ikenna Okpala]]></name>
    <email><![CDATA[me@ikennaokpala.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Populating JSF Combo Box with Database values. (or drop down list)...]]></title>
    <link href="http://ikennaokpala.com/blog/populating-jsf-combo-box-with-database-values"/>
    <updated>2010-05-30T02:19:45+01:00</updated>
    <id>http://ikennaokpala.com/blog/populating-jsf-combo-box-with-database-values</id>
    <content type="html"><![CDATA[<p>I am presently working on my AISD project, and i am using jsf(<a href="http://www.primefaces.org">primefaces</a>) spring and jpa to build the system.</p>

<p>I would like to commend the efforts of the brains behind <a href="http://www.javaserverfaces.org/specification/expert-group">jsf</a> 2.0 and <a href="http://www.primefaces.org">primefaces</a> (1.<em> and 2.</em>) :) in particular for making the life of java web devs much easier.</p>

<p>I remember back in the days the first versions of <a href="http://www.javaserverfaces.org/specification/expert-group">jsf</a> were simply nightmares, which lead my cohorts and i  to move to frameworks like <a href="http://wicket.apache.org/">wicket</a> :).</p>

<!--more-->


<p>This blog post seeks to show how to populate a <a href="http://www.javaserverfaces.org/specification/expert-group">jsf</a> Combo box with values from a database table and also you would notice that the implementation for this case includes both jsf 1.<em> and jsf 2.</em>. I assume some familiarity with spring jpa and <a href="http://www.javaserverfaces.org/specification/expert-group">jsf</a>.</p>

<p>Most relational database records have a primary key to uniquely identify it. This key appears on other tables as foreign keys. In my application i needed to display one or more of the attributes of a record from a table on a form and persist its unique identifier .</p>

<p>Below i provide some sample code that gives some hint on how this can be achieved using plain old java objects..</p>

<p>First lets paint the screen.. For JSF 1.*:</p>

<p><div>
  <pre><code class='xml'>&lt;/p&gt;

&lt;p&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;
xmlns:h=&quot;http://java.sun.com/jsf/html&quot;
xmlns:f=&quot;http://java.sun.com/jsf/core&quot;
xmlns:p=&quot;http://primefaces.prime.com.tr/ui&quot;&gt;
&lt;head&gt;
&amp;lt;p:resources /&gt;
&lt;/head&gt;
&lt;body&gt;
&amp;lt;h:form prependId=&quot;false&quot; styleClass=&quot;cmxform&quot;&gt;
&lt;fieldset&gt;
  &lt;legend&gt; &lt;/legend&gt;
&amp;lt;p:panel id=&quot;panel&quot; header=&quot;Combo Box Example&quot;&gt;
&amp;lt;h:panelGrid columns=&quot;2&quot;  columnClasses=&quot;label,value&quot; styleClass=&quot;grid&quot;&gt;
&amp;lt;h:outputLabel for=&quot;cb&quot; value=&quot;comboItem&quot; /&gt;
&amp;lt;h:selectOneMenu id=&quot;selectOneCb&quot; value=&quot;#{pageBean.model.modelid}&quot;&gt;
&amp;lt;f:selectItem itemLabel=&quot;Select Model&quot; itemValue=&quot;&quot; /&gt;
&amp;lt;f:selectItems value=&quot;#{pageBean.myModelValues}&quot; /&gt;
&amp;lt;/h:selectOneMenu&gt;
&amp;lt;/h:panelGrid&gt;
&amp;lt;/p:panel&gt;
&lt;/fieldset&gt;
&amp;lt;/h:form&gt;
&lt;/body&gt;
&lt;/html&gt;&lt;/p&gt;

&lt;p&gt;</code></pre>
</div>
</p>

<p>For JSF 2.* this is even easier (thanks to <a href="http://cagataycivici.wordpress.com/">Çağatay Çivici</a> the <a href="http://www.primefaces.org">primefaces</a> lead for pointing this out to me :)):</p>

<p><div>
  <pre><code class='xml'>&lt;/p&gt;

&lt;p&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;
xmlns:h=&quot;http://java.sun.com/jsf/html&quot;
xmlns:f=&quot;http://java.sun.com/jsf/core&quot;
xmlns:p=&quot;http://primefaces.prime.com.tr/ui&quot;&gt;
&lt;head&gt;
&amp;lt;p:resources /&gt;
&lt;/head&gt;
&lt;body&gt;
&amp;lt;h:form prependId=&quot;false&quot; styleClass=&quot;cmxform&quot;&gt;
&lt;fieldset&gt;
  &lt;legend&gt; &lt;/legend&gt;
&amp;lt;p:panel id=&quot;panel&quot; header=&quot;Combo Box Example&quot;&gt;
&amp;lt;h:panelGrid columns=&quot;2&quot;  columnClasses=&quot;label,value&quot; styleClass=&quot;grid&quot;&gt;
&amp;lt;h:outputLabel for=&quot;cb&quot; value=&quot;comboItem&quot; /&gt;
&amp;lt;h:selectOneMenu id=&quot;selectOneCb&quot; value=&quot;#{pageBean.model.modelid}&quot;&gt;
&amp;lt;f:selectItem itemLabel=&quot;Select Model&quot; itemValue=&quot;&quot; /&gt;
&amp;lt;f:selectItems value=&quot;#{pageBean.mlist}&quot; var=&quot;model&quot; itemLabel=&quot;#{model.modelvalue}&quot; itemValue=&quot;#{model.modelId}&quot;/&gt;
&amp;lt;/h:selectOneMenu&gt;
&amp;lt;/h:panelGrid&gt;
&amp;lt;/p:panel&gt;
&lt;/fieldset&gt;
&amp;lt;/h:form&gt;
&lt;/body&gt;
&lt;/html&gt;&lt;/p&gt;

&lt;p&gt;</code></pre>
</div>
</p>

<p>Next lets define the backing page bean... For JSF 1.* this is ok :</p>

<p><div>
  <pre><code class='java'>&lt;/p&gt;

&lt;p&gt;@Component(&quot;pageBean&quot;)
@Scope(&quot;request&quot;)
public class PageBean implements Serializable {
private model = new Model();
private ModelService modelService;
private Map&amp;lt;String, String&gt; myModelValues = new HashMap&amp;lt;String, String&gt;();
private List&lt;Model&gt; mList;
public PageBean(){
}&lt;/p&gt;

&lt;p&gt; @Autowired
public PageBean(ModelService modelService){
this. modelService = modelService;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    mList = modelService.findAll();
    for (Model m : mList) {
        myModelValues.put(m.getmyModelValue(), m.getmyModelId());
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
public Map&amp;lt;String, String&gt; getMyModelValues() {
return myModelValues;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;public void setMyModelValues(Map&amp;lt;String, String&gt; myModelValues) {
this.myModelValues= myModelValues;
 }
public Model getModel() {
return model;
}
public void setModel(Model model) {
this.model = model;
}
}&lt;/p&gt;

&lt;p&gt;</code></pre>
</div>
</p>

<p>For JSF 2.* it is even better => You don't need  use a Map or Hash Map as the case may be above (thanks to <a href="http://cagataycivici.wordpress.com/">Çağatay Çivici</a> the <a href="http://www.primefaces.org">primefaces</a> lead for pointing this out ):</p>

<p><div>
  <pre><code class='java'>&lt;/p&gt;

&lt;p&gt;@Component(&quot;pageBean&quot;)
@Scope(&quot;request&quot;)
public class PageBean implements Serializable {
private model = new Model();
private ModelService modelService;
private List&lt;Model&gt; list;
public PageBean(){
}&lt;/p&gt;

&lt;p&gt;@Autowired
public PageBean(ModelService modelService){&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    this. modelService = modelService;
    list = modelService.findAll();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;public List&lt;Model&gt; getList() {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return list;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
public Model getModel() {
return model;
}
public void setModel(Model model) {
this.model = model;
}
}&lt;/p&gt;

&lt;p&gt;</code></pre>
</div>
</p>

<p>Below is a service interface to define the the findAll method:</p>

<p><div>
  <pre><code class='java'>public interface ModelService {&lt;/p&gt;

&lt;p&gt;public List&amp;lt; Model&gt; findAll();
}</code></pre>
</div>
</p>

<p>Next the implementation for the Model Service Interface:</p>

<p><div>
  <pre><code class='java'>&lt;/p&gt;

&lt;p&gt;@Service(&quot;modelService&quot;)
public ModelServiceImpl implements ModelService  {
private ModelDAO modeldao;
@Autowired
public ModelServiceImpl(ModelDAO modeldao) {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    this. modeldao = modeldao;
}
@Transactional(readOnly = true)
public List&amp;lt;Model&amp;gt; findAll() {
    return modeldao.findAll();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}</code></pre>
</div>
</p>

<p>The Data Access object interface:</p>

<p><div>
  <pre><code class='java'>public interface ModelDAO {&lt;/p&gt;

&lt;p&gt;public List&amp;lt; Model&gt; findAll();
}</code></pre>
</div>
</p>

<p>The Data Access object implementation proper:</p>

<p><div>
  <pre><code class='java'>@Repository
public class ModelDAOImpl implements ModelDAO {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@PersistenceContext
protected EntityManager entityMgr;

public EntityManager getEntityMgr() {
    return entityMgr;
}

public void setEntityMgr(EntityManager entityMgr) {
    this.entityMgr = entityMgr;
}

public List&amp;lt;Model&amp;gt; findAll() {
    Query query = entityMgr.createNamedQuery(&quot;Model.findAll&quot;);
    return query.getResultList();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}</code></pre>
</div>
</p>

<p>Finally lets define the jpa model object:</p>

<p><div>
  <pre><code class='java'>@Entity
@Table(name = &quot;MODEL&quot;)
@NamedQuery(name = &quot;Model.findAll&quot;, query = &quot;SELECT m FROM Model m&quot;) // this query returns distinct values from the database.
public class Model implements Serializable {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Id
@Basic(optional = false)
@Column(name = &quot;MODEL_ID&quot;)
private String modelId;
@Basic(optional = false)
@Column(name = &quot;MODEL_VALUE&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;private String modelValue;
 public Model() {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; public Model(String modelId, String modelValue) {
this.modelId = modelId;
this.model = modelValue;
}
 public String getModelId() {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    return modelId;
}

public void setModelId(String modelId) {
    this.modelId = modelId;
}

public String getModelValue() {
    return modelValue;
}

public void setModelValue(String modelValue) {
    this. modelValue = modelValue;
}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;</code></pre>
</div>
</p>

<p>The code above steps through it all... Ciao for now..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuring Spring Security..]]></title>
    <link href="http://ikennaokpala.com/blog/configuring-spring-security"/>
    <updated>2010-05-21T16:57:47+01:00</updated>
    <id>http://ikennaokpala.com/blog/configuring-spring-security</id>
    <content type="html"><![CDATA[<p>Over the years web application security has continued to be a critical issue. This area of concern is a major source of worry for most enterprise application developers.</p>

<p>We as software developers, are faced with the task of securing valuable data that exist within our applications. This data could vary from  email account secured with a username / password pair or a brokerage account secured with a trading PIN, protecting an application is a important aspect of most applications, if not all.  (Walls C., 2007).</p>

<!--more-->


<p>According to <a href="http://www.jroller.com/habuma/">Craig Walls</a> (2007, pg 248), Security is a concern that transcends an application’s functionality. For the most part, an application should play no part in securing itself. Although you could write security functionality directly into your application’s code (and that’s not uncommon), it is better to keep security concerns separate from application concerns.</p>

<p>One of the popular options for the enterprise java world is spring's security framework (formerly Acegi).</p>

<p><a href="http://www.jroller.com/habuma/">Craigs Walls</a> in his spring in action book defined spring security as  <em>"a security framework that provides declarative security for your Spring-based applications."</em></p>

<p>In this blog post, I intend to share my personal experience configuring spring security.</p>

<p>Firstly there are a few requirements (jars). you will need to define the following in your maven pom.xml file.</p>

<p><div>
  <pre><code class='xml'>&lt;dependency&gt;
 &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;
 &lt;artifactId&gt;spring-security-core&lt;/artifactId&gt;
 &lt;version&gt;2.0.4&lt;/version&gt;
 &lt;/dependency&gt;
 &lt;dependency&gt;
 &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;
 &lt;artifactId&gt;spring-security-core-tiger&lt;/artifactId&gt;
 &lt;version&gt;2.0.4&lt;/version&gt;
 &lt;/dependency&gt;
 &lt;dependency&gt;
 &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;
 &lt;artifactId&gt;spring-security-taglibs&lt;/artifactId&gt;
 &lt;version&gt;2.0.4&lt;/version&gt;
 &lt;/dependency&gt;
 &lt;dependency&gt;
 &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;
 &lt;artifactId&gt;spring-security-acl&lt;/artifactId&gt;
 &lt;version&gt;2.0.4&lt;/version&gt;
 &lt;/dependency&gt;
&lt;dependency&gt;
 &lt;groupId&gt;org.aspectj&lt;/groupId&gt;
 &lt;artifactId&gt;aspectjrt&lt;/artifactId&gt;
 &lt;version&gt;1.5.4&lt;/version&gt;
 &lt;/dependency&gt;</code></pre>
</div>
</p>

<p>Next task is configuring the Web.xml file:</p>

<p><div>
  <pre><code class='xml'>&lt;/p&gt;

&lt;p&gt; &lt;context-param&gt;
 &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
 &lt;param-value&gt;
 classpath:applicationContext.xml
 &lt;/param-value&gt;
 &lt;/context-param&gt;&lt;/p&gt;

&lt;p&gt; &lt;listener&gt;
 &lt;listener-class&gt; org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;&lt;/p&gt;

&lt;p&gt; &lt;/listener&gt;&lt;/p&gt;

&lt;p&gt; &lt;filter&gt;
 &lt;filter-name&gt;springSecurityFilterChain&lt;/filter-name&gt;
 &lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt;
 &lt;/filter&gt;&lt;/p&gt;

&lt;p&gt; &lt;filter-mapping&gt;
 &lt;filter-name&gt;springSecurityFilterChain&lt;/filter-name&gt;
 &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
 &lt;/filter-mapping&gt;</code></pre>
</div>
</p>

<p>Every Spring application requires an applications context, this is a primary requirement of all spring based applications, this is a trimmed down version focusing on the topic of this blog post.</p>

<p><div>
  <pre><code class='xml'>&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;MacRoman&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;
xmlns:security=&quot;http://www.springframework.org/schema/security&quot;
xmlns:lang=&quot;http://www.springframework.org/schema/lang&quot;
xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-2.5.xsd
http://www.springframework.org/schema/security
http://www.springframework.org/schema/security/spring-security-2.0.xsd
http://www.springframework.org/schema/lang
http://www.springframework.org/schema/lang/spring-lang-2.5.xsd&quot;&gt;
&amp;lt;context:component-scan base-package=&quot;com.example&quot; /&gt;
&amp;lt;security:http auto-config=&#39;false&#39;&gt;
&amp;lt;security:intercept-url pattern=&quot;/includes/&lt;strong&gt;&quot; access=&quot;IS_AUTHENTICATED_ANONYMOUSLY&quot; filters=&quot;none&quot; /&gt;
&amp;lt;security:intercept-url pattern=&quot;/favicon.ico&quot; access=&quot;IS_AUTHENTICATED_ANONYMOUSLY&quot; filters=&quot;none&quot; /&gt;
&amp;lt;security:intercept-url pattern=&quot;/login.jsp&quot; filters=&quot;none&quot;/&gt;
&amp;lt;security:intercept-url pattern=&quot;/&lt;/strong&gt;&quot; access=&quot;ROLE_USER&quot; filters=&quot;none&quot; /&gt;
&amp;lt;security:form-login login-page=&quot;/login.jsp&quot; authentication-failure-url=&quot;/login.jsp?login_error=1&quot; /&gt;
&amp;lt;security:concurrent-session-control max-sessions=&quot;1&quot;/&gt;
&amp;lt;security:logout logout-url=&quot;/logout&quot; logout-success-url=&quot;/&quot;/&gt;
&amp;lt;/security:http&gt;
&amp;lt;security:authentication-provider&gt;
&amp;lt;security:password-encoder hash=&quot;md5&quot; /&gt;
&amp;lt;security:user-service&gt;
&amp;lt;security:user name=&quot;ikenna&quot; password=&quot;3d801aa532c1cec3ee82d87a99fdf63f&quot; authorities=&quot;ROLE_USER&quot; /&gt;
&amp;lt;security:user name=&quot;admin&quot; password=&quot;21232f297a57a5a743894a0e4a801fc3&quot; authorities=&quot;ROLE_USER&quot; /&gt;
&amp;lt;security:user name=&quot;test&quot; password=&quot;098f6bcd4621d373cade4e832627b4f6&quot; authorities=&quot;ROLE_USER&quot; /&gt;
&amp;lt;/security:user-service&gt;
&amp;lt;/security:authentication-provider&gt;
&lt;/beans&gt;</code></pre>
</div>
</p>

<p>Finally the login.jsp page. This page hold the form tags and should be placed in the root of the webapps foilder.</p>

<p><div>
  <pre><code class='html'>&lt;/p&gt;

&lt;p&gt;&amp;lt;%@page contentType=&quot;text/html&quot; pageEncoding=&quot;MacRoman&quot;%&gt;
&amp;lt;%@ taglib prefix=&#39;c&#39; uri=&#39;http://java.sun.com/jstl/core_rt&#39; %&gt;
&amp;lt;%@ page import=&quot;org.springframework.security.ui.AbstractProcessingFilter&quot; %&gt;
&amp;lt;%@ page import=&quot;org.springframework.security.ui.webapp.AuthenticationProcessingFilter&quot; %&gt;
&amp;lt;%@ page import=&quot;org.springframework.security.AuthenticationException&quot; %&gt;
&amp;lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;
 &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;
&lt;html&gt;
 &lt;head&gt;
 &lt;title&gt; Login Page&lt;/title&gt;
 &lt;link href=&quot;&lt;c:url value=&quot;includes/stylesheets/main.css&quot; /&gt;&quot; media=&quot;screen&quot;  rel=&quot;Stylesheet&quot; type=&quot;text/css&quot; /&gt;
 &lt;link href=&quot;&lt;c:url value=&quot;includes/stylesheets/calendar.css&quot; /&gt;&quot; media=&quot;screen&quot; rel=&quot;Stylesheet&quot; type=&quot;text/css&quot; /&gt;
 &lt;link href=&quot;&lt;c:url value=&quot;includes/stylesheets/forms.css&quot; /&gt;&quot; media=&quot;screen&quot; rel=&quot;Stylesheet&quot; type=&quot;text/css&quot; /&gt;
 &lt;/head&gt;
 &lt;body&gt;
 &lt;h1&gt;Login &lt;/h1&gt;
&amp;lt;c:if test=&quot;${not empty param.login_error}&quot;&gt;
 &lt;font color=&quot;red&quot;&gt;
 Your login attempt was not successful, try again.&lt;br/&gt;&lt;br/&gt;
 Reason: &amp;lt;c:out value=&quot;${SPRING_SECURITY_LAST_EXCEPTION.message}&quot;/&gt;.
 &lt;/font&gt;
 &amp;lt;/c:if&gt;&lt;br&gt;&lt;br&gt;
 &lt;form name=&quot;f&quot; action=&quot;&lt;c:url value=&#39;j_spring_security_check&#39;/&gt;&quot; method=&quot;POST&quot;&gt;
 &lt;fieldset&gt;
 &lt;legend&gt;Log In Form&lt;/legend&gt; &lt;hr&gt;
 &lt;ol&gt;
 &lt;li&gt;&lt;label for=&quot;login&quot;&gt;Username:&lt;/label&gt;
 &lt;input type=&#39;text&#39; name=&#39;j_username&#39; value=&#39;&lt;c:if test=&quot;${not empty param.login_error}&quot;&gt;&amp;lt;c:out value=&quot;${SPRING_SECURITY_LAST_USERNAME}&quot;/&gt;&amp;lt;/c:if&gt;&#39;/&gt;
 &lt;/li&gt;
 &lt;li&gt;
 &lt;label for=&quot;password&quot;&gt;Password:&lt;/label&gt;
 &lt;input type=&#39;password&#39; name=&#39;j_password&#39;/&gt;
 &lt;/li&gt;
 &lt;li&gt;
 &lt;label for=&quot;remember_me&quot;&gt;Remember me:&lt;/label&gt;
 &lt;input type=&quot;checkbox&quot; name=&quot;_spring_security_remember_me&quot;&gt;
 &lt;/li&gt;
 &lt;/ol&gt;
 &lt;div&gt;
 &lt;input name=&quot;reset&quot; type=&quot;reset&quot; value=&quot;Reset&quot;  onclick=&quot;return confirm(&#39;Are you sure you want to Clear or Reset this form&#39;);&quot;&gt;
 &lt;input name=&quot;submit&quot; type=&quot;submit&quot; value=&quot;Log In&quot;&gt;
 &lt;/div&gt;
 &lt;/fieldset&gt;
 &lt;/form
 &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;&lt;/p&gt;

&lt;p&gt;</code></pre>
</div>
</p>

<p>One thing though, I struggled with is spring security not by passing the resources (<em>.js, </em>.css, and images etc..) declared the head section of my login.jsp file.</p>

<p>I noticed Spring security takes into account all the resources that are declared in the *.jsp pages and will atempt to display the last resource it remembered (declared in the login.jsp page).Also modern browsers request for the favicon.ico file from the web pages, I notice spring security required me to let it know that the resources should not be a priority to it.</p>

<p>I would suggest copying all your <em>.js, </em>.css, and images etc.. in to one folder (includes) and then declare the folder as IS_AUTHENTICATED_ANONYMOUSLY also setting the filters off.</p>

<p><div>
  <pre><code class='xml'>&lt;/p&gt;

&lt;p&gt;&amp;lt;security:intercept-url pattern=&quot;/includes/**&quot; access=&quot;IS_AUTHENTICATED_ANONYMOUSLY&quot; filters=&quot;none&quot; /&gt;
&amp;lt;security:intercept-url pattern=&quot;/favicon.ico&quot; access=&quot;IS_AUTHENTICATED_ANONYMOUSLY&quot; filters=&quot;none&quot; /&gt;</code></pre>
</div>
</p>

<p>REFERENCE:
Walls C., Breidenbach R. 2007. Spring in Action Second Edition, Manning Publishers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using the Wicket Framework to Update style tag.]]></title>
    <link href="http://ikennaokpala.com/blog/using-the-wicket-framework-to-update-html-style-tag"/>
    <updated>2009-09-08T15:18:00+01:00</updated>
    <id>http://ikennaokpala.com/blog/using-the-wicket-framework-to-update-html-style-tag</id>
    <content type="html"><![CDATA[<p>In this post,  <a href="http://wicket.apache.org/">Wicket</a> Framework is used to update the embedded style tag.</p>

<p>An already working sample can be found <a href="http://wicket1.ikennaokpala.staxapps.net/">here</a>.</p>

<!--more-->


<p>Let's begin by configuring the web application (i.e. web.xml)
<div>
  <pre><code class='xml'>&lt;/p&gt;

&lt;p&gt;&lt;web-app xmlns=&quot;http://java.sun.com/xml/ns/j2ee&quot; xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; schemalocation=&quot;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot; version=&quot;2.4&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;display-name&gt;CSS and Wicket&lt;/display-name&gt;
&lt;filter&gt;
&lt;filter-name&gt;css_wicket&lt;/filter-name&gt;
&lt;filter-class&gt;org.apache.wicket.protocol.http.WicketFilter&lt;/filter-class&gt;
&lt;init-param&gt;
&lt;param-name&gt;applicationClassName&lt;/param-name&gt;
&lt;param-value&gt;com.jw.ike.pages.CssApplication&lt;/param-value&gt;
&lt;/init-param&gt;
&lt;/filter&gt;&lt;/p&gt;

&lt;p&gt;&lt;filter-mapping&gt;
&lt;filter-name&gt;css_wicket&lt;/filter-name&gt;
&lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/filter-mapping&gt;&lt;/p&gt;

&lt;p&gt;&lt;/web-app&gt;&lt;/p&gt;

&lt;p&gt;</code></pre>
</div>
</p>

<p>The wicket  application class go as follows:</p>

<p><div>
  <pre><code class='java'>&lt;/p&gt;

&lt;p&gt;public class CssApplication extends WebApplication {&lt;/p&gt;

&lt;p&gt;public CssApplication() {
}&lt;/p&gt;

&lt;p&gt;public Class getHomePage() {
return CssDemo.class;
}&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;</code></pre>
</div>
</p>

<p>The getHomePage() method returns this Page:</p>

<p><div>
  <pre><code class='java'>&lt;/p&gt;

&lt;p&gt;public class CssDemo extends WebPage implements Serializable {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private String uStyle;

public CssDemo() {
    add(new Label(&quot;style&quot;));
    add(new CssForm(&quot;addform&quot;));

}

public CssDemo(String userStyle) {
    this.uStyle = userStyle;
    this.add(new Label(&quot;style&quot;, new PropertyModel(this, &quot;uStyle&quot;)));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;add(new CssForm(&quot;addform&quot;));&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;</code></pre>
</div>
</p>

<p>And the accompanying HTML web page is:</p>

<p><div>
  <pre><code class='html'>&lt;/p&gt;

&lt;p&gt;&lt;html&gt;&lt;/p&gt;

&lt;p&gt;&lt;head&gt;
&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;../css/style/style.css&quot;&gt;
&lt;title&gt;Wicket Updating Style Sheet&lt;/title&gt;&lt;/p&gt;



&lt;p&gt;&lt;/head&gt;
&lt;body&gt;&lt;/p&gt;

&lt;div id=&quot;bmain&quot;&gt;
&lt;form wicket:id=&quot;addform&quot;&gt;
&lt;h2&gt;Update Style Sheet...&lt;/h2&gt;

&lt;span&gt;Select Pre-Defined CSS Rules &lt;/span&gt;

&lt;select wicket:id=&quot;combo&quot;&gt;

&lt;/select&gt;

&lt;textarea id=&quot;ta&quot; wicket:id=&quot;txta&quot; rows=&quot;20&quot; cols=&quot;60&quot;&gt; rich text &lt;/textarea&gt;

&lt;input id=&quot;btn&quot; type=&quot;submit&quot; value=&quot;::Post Style Sheet::&quot;&gt;&lt;/form&gt;
&lt;a href=&quot;http://wicket.apache.org/&quot; &gt;
&lt;img id=&quot;logo&quot; alt=&quot;Wicket&quot; src=&quot;../images/wicket-logo.png&quot; border=&quot;0&quot; width=&#39;111&#39; height=&quot;155&quot;/&gt;&lt;/a&gt;

&lt;/div&gt;




&lt;div id=&quot;side&quot;&gt;

&lt;h1&gt;Change Me @!#%.&lt;/h1&gt;

 &lt;/div&gt;


&lt;p&gt;&lt;/body&gt;
&lt;/html&gt;&lt;/p&gt;

&lt;p&gt;</code></pre>
</div>
</p>

<p>And then the Form Class:</p>

<p><div>
  <pre><code class='java'>&lt;/p&gt;

&lt;p&gt;public class CssForm extends Form {&lt;/p&gt;

&lt;p&gt;private String style1 = &quot;Choose a style&quot;;
private String style2 = &quot;h1{ font-size: 4.0em; font-family: Mistral; color: #dc512b; border:10px solid #bb342d; background-color: #098762;text-align: center;}&quot;;
private String style3 = &quot;h1{ font-size: 5.0em; font-family: Comic Sans MS; color: #0066CC; border:10px solid #330066; background-color: green;text-align: center;}&quot;;
private String style4 = &quot;h1{ font-size: 6.0em; font-family: Curlz MT; color: #CCFFFF; border:10px solid #445698; background-color: #6666CC;text-align: center;}&quot;;&lt;/p&gt;

&lt;p&gt;private static String css;
private List cssList;
private String selectedCss = style1;
private DropDownChoice dropDownMenu;
private TextArea textArea;&lt;/p&gt;

&lt;p&gt;public CssForm(String componentid) {
super(componentid);&lt;/p&gt;

&lt;p&gt;cssList = Arrays.asList(new String[]{style1, style2, style3, style4});&lt;/p&gt;

&lt;p&gt;dropDownMenu = new DropDownChoice(&quot;combo&quot;, new PropertyModel(this, &quot;selectedCss&quot;),&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; cssList) {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; @Override
 protected void onSelectionChanged(Object newSelection) {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; textArea.setModelObject(newSelection);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; }&lt;/p&gt;

&lt;p&gt; @Override
 protected boolean wantOnSelectionChangedNotifications() {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; return true;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; }&lt;/p&gt;

&lt;p&gt;};
add(dropDownMenu);&lt;/p&gt;

&lt;p&gt;textArea = new TextArea(&quot;txta&quot;, new PropertyModel(this, &quot;css&quot;));&lt;/p&gt;

&lt;p&gt;add(textArea);&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;@Override
protected void onSubmit() {
String definedCssRule =  textArea.getModelObject().toString();
definedCssRule = &quot;\n\n\n&quot; + definedCssRule + &quot;\n\n\n&quot;;
setResponsePage(new CssDemo(definedCssRule));
textArea.setModelObject(null);
}
}&lt;/p&gt;

&lt;p&gt;</code></pre>
</div>
</p>

<p>The External Style Sheet :</p>

<p><div>
  <pre><code class='css'>&lt;/p&gt;

&lt;p&gt;body {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;background-image: url(&quot;../images/cl.jpg&quot;);
background-repeat: no-repeat;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;h1 {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;font-size: 4.5em;
color: #4088b8;
margin: -300px 0 0 0;
position: relative;
left: -20px;
top: 10px;
position: relative
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;h2 {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;color: #4088b8;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;span {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;font-size: 1.0em;
color: #4088b8;
padding:0 33px 0 2px;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;h1&gt;logo {&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;position: relative;
left: 0px;
top: 50px;
z-index: 1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
select {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;position: relative;
left: 0px;
bottom: 2px;
width: 230px;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;h1&gt;jw {&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;position: relative;
left: 900px;
top: -50px;
z-index: 1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;h1&gt;bmain {&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;width: 510px;
margin: 10px 0 0 0;
position: inherit;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;h1&gt;side {&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;float: right;
width: 600px;
margin: -150px 0 0 0;
padding: 1px 0 0 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;h1&gt;ta {&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;padding: 0 20px 0 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;h1&gt;btn {&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;background-color: #4088b8;
border-color: 4088b8;
color: white;
position: relative;
left: 180px;
top: 50px;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;</code></pre>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2002 – Can’t connect to local MySQL server through socket ‘/var/mysql/mysql.sock’]]></title>
    <link href="http://ikennaokpala.com/blog/2002-cant-connect-to-local-mysql-server-through-socket-varmysqlmysql-sock"/>
    <updated>2009-08-11T01:18:00+01:00</updated>
    <id>http://ikennaokpala.com/blog/2002-cant-connect-to-local-mysql-server-through-socket-varmysqlmysql-sock</id>
    <content type="html"><![CDATA[<p>Today, i stopped being a fan of MAMP for integrating PHP Apache and MYSQL, and i decided to setup Apache, MYSQL and PHP stack on my MAC OS X 10.5.7 (leopard) the good old way...</p>

<p>But, i encountered this error: 2002 - Can't connect to local MySQL server through socket '/var/mysql/mysql.sock' (2).</p>

<p>Wow... i then discovered funny enough, that MYSQL instance was running perfectly and i was able to connect MYSQL</p>

<!--more-->


<p>via the MYSQL Admin GUI tool.</p>

<p>I made a lucky guess asserting, that the PHP config file may be missing some info, Hmmm...</p>

<p>Well the solution goes as follows:</p>

<p>I searched for "mysql.lock" and i discovered that the MYSQL Socket file was located in "/tmp/mysql.lock.</p>

<p>Also, in the my PHP.ini file the value for "mysql.default_socket" was entirely empty "".</p>

<p>ehhhh... Run this command in Terminal to view hidden files "defaults write com.apple.finder AppleShowAllFiles TRUE" and then followed by "killall Finder".</p>

<p>Then Go to "private/etc/PHP.ini". (note: private is a hidden folder).</p>

<p>If prior to this, in "private/etc/ "folder, the PHP.ini file does not exist copy and paste it there first.</p>

<p>Now open the PHP.ini file with say BBedit or TextWrangler.</p>

<p>Use command + F to find "mysql.default_socket" and paste "/tmp/mysql.sock" as it's new value.</p>

<p>Finally restart your Apache web server with Terminal using "sudo apachectl graceful".</p>

<p>After restart, PHP will be able to make connection calls to MYSQL with no further a do or hassle.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Development Principles]]></title>
    <link href="http://ikennaokpala.com/blog/web-development-principles"/>
    <updated>2009-07-10T14:16:00+01:00</updated>
    <id>http://ikennaokpala.com/blog/web-development-principles</id>
    <content type="html"><![CDATA[<p>Recently, i came across my lecture note which covered rules that make a web site design excellent, this was a lecture given by Mr. Denver Reynolds.</p>

<p>It states clearly that >>>>></p>

<ul>
<li>Content is king: Users would visit a site for information. Without information the raison d’etre of the site is non-existent.</li>
<li>User orientated design: If the site design is not focused around the user and facilitating their ease of use the site can appear cumbersome and awkward to use.</li>
<li>Low click depth: Every part of the site should be accessible in just a few clicks of the mouse (ideally 3 or less). This makes the site easy to navigate and find information for the users.</li>
</ul>


<!--more-->


<ul>
<li>6 second rule: The web page should have loaded into the browser within 6 seconds. This is generally the maximum amount of time a visitor would invest in the site without receiving any return in the form of information.</li>
<li>Page consistency: The page design should appear consistent and coherent, thus signifying the site as a unified whole      etc.</li>
</ul>

]]></content>
  </entry>
  
</feed>
